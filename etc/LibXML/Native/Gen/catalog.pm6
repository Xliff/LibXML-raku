use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::catalog;
# interfaces to the Catalog handling system:
#    the catalog module implements the support for XML Catalogs and SGML catalogs 
use LibXML::Native::Defs :$lib, :xmlCharP;

enum xmlCatalogAllow is export (
    XML_CATA_ALLOW_ALL => 3,
    XML_CATA_ALLOW_DOCUMENT => 2,
    XML_CATA_ALLOW_GLOBAL => 1,
    XML_CATA_ALLOW_NONE => 0,
);

enum xmlCatalogPrefer is export (
    XML_CATA_PREFER_NONE => 0,
    XML_CATA_PREFER_PUBLIC => 1,
    XML_CATA_PREFER_SYSTEM => 2,
);

class xmlCatalog is repr('CPointer') {
    our sub LoadA(Str $filename --> xmlCatalog) is native(XML2) is symbol('xmlLoadACatalog') {*}
    our sub LoadSGMLSuper(Str $filename --> xmlCatalog) is native(XML2) is symbol('xmlLoadSGMLSuperCatalog') {*}
    our sub New(int32 $sgml --> xmlCatalog) is native(XML2) is symbol('xmlNewCatalog') {*}

    method ACatalogAdd(xmlCharP $type, xmlCharP $orig, xmlCharP $replace --> int32) is native(XML2) is symbol('xmlACatalogAdd') {*}
    method ACatalogDump(FILE * $out) is native(XML2) is symbol('xmlACatalogDump') {*}
    method ACatalogRemove(xmlCharP $value --> int32) is native(XML2) is symbol('xmlACatalogRemove') {*}
    method ACatalogResolve(xmlCharP $pubID, xmlCharP $sysID --> xmlCharP) is native(XML2) is symbol('xmlACatalogResolve') {*}
    method ACatalogResolvePublic(xmlCharP $pubID --> xmlCharP) is native(XML2) is symbol('xmlACatalogResolvePublic') {*}
    method ACatalogResolveSystem(xmlCharP $sysID --> xmlCharP) is native(XML2) is symbol('xmlACatalogResolveSystem') {*}
    method ACatalogResolveURI(xmlCharP $URI --> xmlCharP) is native(XML2) is symbol('xmlACatalogResolveURI') {*}
    method IsEmpty( --> int32) is native(XML2) is symbol('xmlCatalogIsEmpty') {*}
    method ConvertSGML( --> int32) is native(XML2) is symbol('xmlConvertSGMLCatalog') {*}
    method Free() is native(XML2) is symbol('xmlFreeCatalog') {*}
}

our sub xmlCatalogAdd(xmlCharP $type, xmlCharP $orig, xmlCharP $replace --> int32) is native(XML2) is export {*}
our sub xmlCatalogAddLocal(Pointer $catalogs, xmlCharP $URL --> Pointer) is native(XML2) is export {*}
our sub xmlCatalogCleanup() is native(XML2) is export {*}
our sub xmlCatalogConvert( --> int32) is native(XML2) is export {*}
our sub xmlCatalogDump(FILE * $out) is native(XML2) is export {*}
our sub xmlCatalogFreeLocal(Pointer $catalogs) is native(XML2) is export {*}
our sub GetDefaults( --> xmlCatalogAllow) is native(XML2) is symbol('xmlCatalogGetDefaults') {*}
our sub xmlCatalogGetPublic(xmlCharP $pubID --> xmlCharP) is native(XML2) is export {*}
our sub xmlCatalogGetSystem(xmlCharP $sysID --> xmlCharP) is native(XML2) is export {*}
our sub xmlCatalogLocalResolve(Pointer $catalogs, xmlCharP $pubID, xmlCharP $sysID --> xmlCharP) is native(XML2) is export {*}
our sub xmlCatalogLocalResolveURI(Pointer $catalogs, xmlCharP $URI --> xmlCharP) is native(XML2) is export {*}
our sub xmlCatalogRemove(xmlCharP $value --> int32) is native(XML2) is export {*}
our sub xmlCatalogResolve(xmlCharP $pubID, xmlCharP $sysID --> xmlCharP) is native(XML2) is export {*}
our sub xmlCatalogResolvePublic(xmlCharP $pubID --> xmlCharP) is native(XML2) is export {*}
our sub xmlCatalogResolveSystem(xmlCharP $sysID --> xmlCharP) is native(XML2) is export {*}
our sub xmlCatalogResolveURI(xmlCharP $URI --> xmlCharP) is native(XML2) is export {*}
our sub xmlCatalogSetDebug(int32 $level --> int32) is native(XML2) is export {*}
our sub SetDefault(xmlCatalogPrefer $prefer --> xmlCatalogPrefer) is native(XML2) is symbol('xmlCatalogSetDefaultPrefer') {*}
our sub xmlCatalogSetDefaults(xmlCatalogAllow $allow) is native(XML2) is export {*}
our sub xmlInitializeCatalog() is native(XML2) is export {*}
our sub xmlLoadCatalog(Str $filename --> int32) is native(XML2) is export {*}
our sub xmlLoadCatalogs(Str $pathss) is native(XML2) is export {*}
