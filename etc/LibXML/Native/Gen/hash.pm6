use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::hash;
# Chained hash tables:
#    This module implements the hash table support used in various places in the library. 
use LibXML::Native::Defs :LIB, :XmlCharP;

struct xmlHashTable is repr('CPointer') {
}

sub xmlHashAddEntry(xmlHashTablePtr $table, xmlCharP $name, Pointer $userdata --> int32) is native(LIB) {*};
sub xmlHashAddEntry2(xmlHashTablePtr $table, xmlCharP $name, xmlCharP $name2, Pointer $userdata --> int32) is native(LIB) {*};
sub xmlHashAddEntry3(xmlHashTablePtr $table, xmlCharP $name, xmlCharP $name2, xmlCharP $name3, Pointer $userdata --> int32) is native(LIB) {*};
sub xmlHashCopy(xmlHashTablePtr $table, xmlHashCopier $f --> xmlHashTablePtr) is native(LIB) {*};
sub xmlHashCreate(int32 $size --> xmlHashTablePtr) is native(LIB) {*};
sub xmlHashCreateDict(int32 $size, xmlDictPtr $dict --> xmlHashTablePtr) is native(LIB) {*};
sub xmlHashDefaultDeallocator(Pointer $entry, xmlCharP $name) is native(LIB) {*};
sub xmlHashFree(xmlHashTablePtr $table, xmlHashDeallocator $f) is native(LIB) {*};
sub xmlHashLookup(xmlHashTablePtr $table, xmlCharP $name --> Pointer) is native(LIB) {*};
sub xmlHashLookup2(xmlHashTablePtr $table, xmlCharP $name, xmlCharP $name2 --> Pointer) is native(LIB) {*};
sub xmlHashLookup3(xmlHashTablePtr $table, xmlCharP $name, xmlCharP $name2, xmlCharP $name3 --> Pointer) is native(LIB) {*};
sub xmlHashQLookup(xmlHashTablePtr $table, xmlCharP $prefix, xmlCharP $name --> Pointer) is native(LIB) {*};
sub xmlHashQLookup2(xmlHashTablePtr $table, xmlCharP $prefix, xmlCharP $name, xmlCharP $prefix2, xmlCharP $name2 --> Pointer) is native(LIB) {*};
sub xmlHashQLookup3(xmlHashTablePtr $table, xmlCharP $prefix, xmlCharP $name, xmlCharP $prefix2, xmlCharP $name2, xmlCharP $prefix3, xmlCharP $name3 --> Pointer) is native(LIB) {*};
sub xmlHashRemoveEntry(xmlHashTablePtr $table, xmlCharP $name, xmlHashDeallocator $f --> int32) is native(LIB) {*};
sub xmlHashRemoveEntry2(xmlHashTablePtr $table, xmlCharP $name, xmlCharP $name2, xmlHashDeallocator $f --> int32) is native(LIB) {*};
sub xmlHashRemoveEntry3(xmlHashTablePtr $table, xmlCharP $name, xmlCharP $name2, xmlCharP $name3, xmlHashDeallocator $f --> int32) is native(LIB) {*};
sub xmlHashScan(xmlHashTablePtr $table, xmlHashScanner $f, Pointer $data) is native(LIB) {*};
sub xmlHashScan3(xmlHashTablePtr $table, xmlCharP $name, xmlCharP $name2, xmlCharP $name3, xmlHashScanner $f, Pointer $data) is native(LIB) {*};
sub xmlHashScanFull(xmlHashTablePtr $table, xmlHashScannerFull $f, Pointer $data) is native(LIB) {*};
sub xmlHashScanFull3(xmlHashTablePtr $table, xmlCharP $name, xmlCharP $name2, xmlCharP $name3, xmlHashScannerFull $f, Pointer $data) is native(LIB) {*};
sub xmlHashSize(xmlHashTablePtr $table --> int32) is native(LIB) {*};
sub xmlHashUpdateEntry(xmlHashTablePtr $table, xmlCharP $name, Pointer $userdata, xmlHashDeallocator $f --> int32) is native(LIB) {*};
sub xmlHashUpdateEntry2(xmlHashTablePtr $table, xmlCharP $name, xmlCharP $name2, Pointer $userdata, xmlHashDeallocator $f --> int32) is native(LIB) {*};
sub xmlHashUpdateEntry3(xmlHashTablePtr $table, xmlCharP $name, xmlCharP $name2, xmlCharP $name3, Pointer $userdata, xmlHashDeallocator $f --> int32) is native(LIB) {*};
