use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::parserInternals;
# internals routines and limits exported by the parser.:
#    this module exports a number of internal parsing routines they are not really all intended for applications but can prove useful doing low level processing. 
use LibXML::Native::Defs :LIB, :XmlCharP;

sub htmlCreateFileParserCtxt(Str $filename, Str $encoding --> htmlParserCtxtPtr) is native(LIB) {*};
sub htmlInitAutoClose() is native(LIB) {*};
sub inputPop(xmlParserCtxtPtr $ctxt --> xmlParserInputPtr) is native(LIB) {*};
sub inputPush(xmlParserCtxtPtr $ctxt, xmlParserInputPtr $value --> int32) is native(LIB) {*};
sub namePop(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub namePush(xmlParserCtxtPtr $ctxt, xmlCharP $value --> int32) is native(LIB) {*};
sub nodePop(xmlParserCtxtPtr $ctxt --> xmlNodePtr) is native(LIB) {*};
sub nodePush(xmlParserCtxtPtr $ctxt, xmlNodePtr $value --> int32) is native(LIB) {*};
sub xmlCheckLanguageID(xmlCharP $lang --> int32) is native(LIB) {*};
sub xmlCopyChar(int32 $len, xmlCharP $out, int32 $val --> int32) is native(LIB) {*};
sub xmlCopyCharMultiByte(xmlCharP $out, int32 $val --> int32) is native(LIB) {*};
sub xmlCreateEntityParserCtxt(xmlCharP $URL, xmlCharP $ID, xmlCharP $base --> xmlParserCtxtPtr) is native(LIB) {*};
sub xmlCreateFileParserCtxt(Str $filename --> xmlParserCtxtPtr) is native(LIB) {*};
sub xmlCreateMemoryParserCtxt(Str $buffer, int32 $size --> xmlParserCtxtPtr) is native(LIB) {*};
sub xmlCreateURLParserCtxt(Str $filename, int32 $options --> xmlParserCtxtPtr) is native(LIB) {*};
sub xmlCurrentChar(xmlParserCtxtPtr $ctxt, Pointer[int32] $len --> int32) is native(LIB) {*};
sub xmlDecodeEntities(xmlParserCtxtPtr $ctxt, int32 $len, int32 $what, xmlChar $end, xmlChar $end2, xmlChar $end3 --> xmlCharP) is native(LIB) {*};
sub xmlErrMemory(xmlParserCtxtPtr $ctxt, Str $extra) is native(LIB) {*};
sub xmlFreeInputStream(xmlParserInputPtr $input) is native(LIB) {*};
sub xmlHandleEntity(xmlParserCtxtPtr $ctxt, xmlEntityPtr $entity) is native(LIB) {*};
sub xmlIsLetter(int32 $c --> int32) is native(LIB) {*};
sub xmlNamespaceParseNCName(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlNamespaceParseNSDef(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlNamespaceParseQName(xmlParserCtxtPtr $ctxt, xmlChar ** $prefix --> xmlCharP) is native(LIB) {*};
sub xmlNewEntityInputStream(xmlParserCtxtPtr $ctxt, xmlEntityPtr $entity --> xmlParserInputPtr) is native(LIB) {*};
sub xmlNewInputFromFile(xmlParserCtxtPtr $ctxt, Str $filename --> xmlParserInputPtr) is native(LIB) {*};
sub xmlNewInputStream(xmlParserCtxtPtr $ctxt --> xmlParserInputPtr) is native(LIB) {*};
sub xmlNewStringInputStream(xmlParserCtxtPtr $ctxt, xmlCharP $buffer --> xmlParserInputPtr) is native(LIB) {*};
sub xmlNextChar(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseAttValue(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseAttribute(xmlParserCtxtPtr $ctxt, xmlChar ** $value --> xmlCharP) is native(LIB) {*};
sub xmlParseAttributeListDecl(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseAttributeType(xmlParserCtxtPtr $ctxt, xmlEnumerationPtr * $tree --> int32) is native(LIB) {*};
sub xmlParseCDSect(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseCharData(xmlParserCtxtPtr $ctxt, int32 $cdata) is native(LIB) {*};
sub xmlParseCharRef(xmlParserCtxtPtr $ctxt --> int32) is native(LIB) {*};
sub xmlParseComment(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseContent(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseDefaultDecl(xmlParserCtxtPtr $ctxt, xmlChar ** $value --> int32) is native(LIB) {*};
sub xmlParseDocTypeDecl(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseElement(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseElementChildrenContentDecl(xmlParserCtxtPtr $ctxt, int32 $inputchk --> xmlElementContentPtr) is native(LIB) {*};
sub xmlParseElementContentDecl(xmlParserCtxtPtr $ctxt, xmlCharP $name, xmlElementContentPtr * $result --> int32) is native(LIB) {*};
sub xmlParseElementDecl(xmlParserCtxtPtr $ctxt --> int32) is native(LIB) {*};
sub xmlParseElementMixedContentDecl(xmlParserCtxtPtr $ctxt, int32 $inputchk --> xmlElementContentPtr) is native(LIB) {*};
sub xmlParseEncName(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseEncodingDecl(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseEndTag(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseEntityDecl(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseEntityRef(xmlParserCtxtPtr $ctxt --> xmlEntityPtr) is native(LIB) {*};
sub xmlParseEntityValue(xmlParserCtxtPtr $ctxt, xmlChar ** $orig --> xmlCharP) is native(LIB) {*};
sub xmlParseEnumeratedType(xmlParserCtxtPtr $ctxt, xmlEnumerationPtr * $tree --> int32) is native(LIB) {*};
sub xmlParseEnumerationType(xmlParserCtxtPtr $ctxt --> xmlEnumerationPtr) is native(LIB) {*};
sub xmlParseExternalID(xmlParserCtxtPtr $ctxt, xmlChar ** $publicID, int32 $strict --> xmlCharP) is native(LIB) {*};
sub xmlParseExternalSubset(xmlParserCtxtPtr $ctxt, xmlCharP $ExternalID, xmlCharP $SystemID) is native(LIB) {*};
sub xmlParseMarkupDecl(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseMisc(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseName(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseNamespace(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseNmtoken(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseNotationDecl(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseNotationType(xmlParserCtxtPtr $ctxt --> xmlEnumerationPtr) is native(LIB) {*};
sub xmlParsePEReference(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParsePI(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParsePITarget(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParsePubidLiteral(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseQuotedString(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseReference(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseSDDecl(xmlParserCtxtPtr $ctxt --> int32) is native(LIB) {*};
sub xmlParseStartTag(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseSystemLiteral(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseTextDecl(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParseVersionInfo(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseVersionNum(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlParseXMLDecl(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParserHandlePEReference(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParserHandleReference(xmlParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlParserInputShrink(xmlParserInputPtr $in) is native(LIB) {*};
sub xmlPopInput(xmlParserCtxtPtr $ctxt --> xmlChar) is native(LIB) {*};
sub xmlPushInput(xmlParserCtxtPtr $ctxt, xmlParserInputPtr $input --> int32) is native(LIB) {*};
sub xmlScanName(xmlParserCtxtPtr $ctxt --> xmlCharP) is native(LIB) {*};
sub xmlSetEntityReferenceFunc(xmlEntityReferenceFunc $func) is native(LIB) {*};
sub xmlSkipBlankChars(xmlParserCtxtPtr $ctxt --> int32) is native(LIB) {*};
sub xmlSplitQName(xmlParserCtxtPtr $ctxt, xmlCharP $name, xmlChar ** $prefix --> xmlCharP) is native(LIB) {*};
sub xmlStringCurrentChar(xmlParserCtxtPtr $ctxt, xmlCharP $cur, Pointer[int32] $len --> int32) is native(LIB) {*};
sub xmlStringDecodeEntities(xmlParserCtxtPtr $ctxt, xmlCharP $str, int32 $what, xmlChar $end, xmlChar $end2, xmlChar $end3 --> xmlCharP) is native(LIB) {*};
sub xmlStringLenDecodeEntities(xmlParserCtxtPtr $ctxt, xmlCharP $str, int32 $len, int32 $what, xmlChar $end, xmlChar $end2, xmlChar $end3 --> xmlCharP) is native(LIB) {*};
sub xmlSwitchEncoding(xmlParserCtxtPtr $ctxt, xmlCharEncoding $enc --> int32) is native(LIB) {*};
sub xmlSwitchInputEncoding(xmlParserCtxtPtr $ctxt, xmlParserInputPtr $input, xmlCharEncodingHandlerPtr $handler --> int32) is native(LIB) {*};
sub xmlSwitchToEncoding(xmlParserCtxtPtr $ctxt, xmlCharEncodingHandlerPtr $handler --> int32) is native(LIB) {*};
