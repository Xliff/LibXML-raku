use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::schematron;
# XML Schemastron implementation:
#    interface to the XML Schematron validity checking. 
use LibXML::Native::Defs :$lib, :xmlCharP;

enum xmlSchematronValidOptions is export (
    XML_SCHEMATRON_OUT_BUFFER => 512,
    XML_SCHEMATRON_OUT_ERROR => 8,
    XML_SCHEMATRON_OUT_FILE => 256,
    XML_SCHEMATRON_OUT_IO => 1024,
    XML_SCHEMATRON_OUT_QUIET => 1,
    XML_SCHEMATRON_OUT_TEXT => 2,
    XML_SCHEMATRON_OUT_XML => 4,
);

class xmlSchematron is repr('CPointer') {
    method Free() is native(XML2) is symbol('xmlSchematronFree') {*}
    method NewValidCtxt(int32 $options --> xmlSchematronValidCtxt) is native(XML2) is symbol('xmlSchematronNewValidCtxt') {*}
}

class xmlSchematronParserCtxt is repr('CPointer') {
    our sub NewMem(Str $buffer, int32 $size --> xmlSchematronParserCtxt) is native(XML2) is symbol('xmlSchematronNewMemParserCtxt') {*}
    our sub New(Str $URL --> xmlSchematronParserCtxt) is native(XML2) is symbol('xmlSchematronNewParserCtxt') {*}

    method Free() is native(XML2) is symbol('xmlSchematronFreeParserCtxt') {*}
    method Parse( --> xmlSchematron) is native(XML2) is symbol('xmlSchematronParse') {*}
}

class xmlSchematronValidCtxt is repr('CPointer') {
    method Free() is native(XML2) is symbol('xmlSchematronFreeValidCtxt') {*}
    method SetValidStructuredErrors(xmlStructuredErrorFunc $serror, Pointer $ctx) is native(XML2) is symbol('xmlSchematronSetValidStructuredErrors') {*}
    method ValidateDoc(xmlDoc $instance --> int32) is native(XML2) is symbol('xmlSchematronValidateDoc') {*}
}
