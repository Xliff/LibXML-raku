use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::schematron;
# XML Schemastron implementation:
#    interface to the XML Schematron validity checking. 
use LibXML::Native::Defs :LIB, :XmlCharP;

enum xmlSchematronValidOptions is export {
    XML_SCHEMATRON_OUT_BUFFER => 512,
    XML_SCHEMATRON_OUT_ERROR => 8,
    XML_SCHEMATRON_OUT_FILE => 256,
    XML_SCHEMATRON_OUT_IO => 1024,
    XML_SCHEMATRON_OUT_QUIET => 1,
    XML_SCHEMATRON_OUT_TEXT => 2,
    XML_SCHEMATRON_OUT_XML => 4,
}

struct xmlSchematron is repr('CPointer') {
}

struct xmlSchematronParserCtxt is repr('CPointer') {
}

struct xmlSchematronValidCtxt is repr('CPointer') {
}

sub xmlSchematronFree(xmlSchematronPtr $schema) is native(LIB) {*};
sub xmlSchematronFreeParserCtxt(xmlSchematronParserCtxtPtr $ctxt) is native(LIB) {*};
sub xmlSchematronFreeValidCtxt(xmlSchematronValidCtxtPtr $ctxt) is native(LIB) {*};
sub xmlSchematronNewDocParserCtxt(xmlDocPtr $doc --> xmlSchematronParserCtxtPtr) is native(LIB) {*};
sub xmlSchematronNewMemParserCtxt(Str $buffer, int32 $size --> xmlSchematronParserCtxtPtr) is native(LIB) {*};
sub xmlSchematronNewParserCtxt(Str $URL --> xmlSchematronParserCtxtPtr) is native(LIB) {*};
sub xmlSchematronNewValidCtxt(xmlSchematronPtr $schema, int32 $options --> xmlSchematronValidCtxtPtr) is native(LIB) {*};
sub xmlSchematronParse(xmlSchematronParserCtxtPtr $ctxt --> xmlSchematronPtr) is native(LIB) {*};
sub xmlSchematronSetValidStructuredErrors(xmlSchematronValidCtxtPtr $ctxt, xmlStructuredErrorFunc $serror, Pointer $ctx) is native(LIB) {*};
sub xmlSchematronValidateDoc(xmlSchematronValidCtxtPtr $ctxt, xmlDocPtr $instance --> int32) is native(LIB) {*};
