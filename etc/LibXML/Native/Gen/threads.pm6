use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::threads;
# interfaces for thread handling:
#    set of generic threading related routines should work with pthreads, Windows native or TLS threads 
use LibXML::Native::Defs :$lib, :xmlCharP;

class xmlMutex is repr('CPointer') {
    our sub New( --> xmlMutex) is native(XML2) is symbol('xmlNewMutex') {*}

    method Free() is native(XML2) is symbol('xmlFreeMutex') {*}
    method Lock() is native(XML2) is symbol('xmlMutexLock') {*}
    method Unlock() is native(XML2) is symbol('xmlMutexUnlock') {*}
}

class xmlRMutex is repr('CPointer') {
    our sub New( --> xmlRMutex) is native(XML2) is symbol('xmlNewRMutex') {*}

    method Free() is native(XML2) is symbol('xmlFreeRMutex') {*}
    method Lock() is native(XML2) is symbol('xmlRMutexLock') {*}
    method Unlock() is native(XML2) is symbol('xmlRMutexUnlock') {*}
}

our sub xmlCleanupThreads() is native(XML2) is export {*}
our sub xmlDllMain(Pointer $hinstDLL, ulong $fdwReason, Pointer $lpvReserved --> int32) is native(XML2) is export {*}
our sub xmlGetThreadId( --> int32) is native(XML2) is export {*}
our sub xmlInitThreads() is native(XML2) is export {*}
our sub xmlIsMainThread( --> int32) is native(XML2) is export {*}
our sub xmlLockLibrary() is native(XML2) is export {*}
our sub xmlUnlockLibrary() is native(XML2) is export {*}
