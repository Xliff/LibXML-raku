use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::threads;
# interfaces for thread handling:
#    set of generic threading related routines should work with pthreads, Windows native or TLS threads 
use LibXML::Native::Defs :LIB, :xmlCharP;

class xmlMutex is repr('CPointer') {
    sub xmlNewMutex( --> xmlMutex) is native(LIB) {*};

    method Free() is native(LIB) is symbol('xmlFreeMutex') {*};
    method Lock() is native(LIB) is symbol('xmlMutexLock') {*};
    method Unlock() is native(LIB) is symbol('xmlMutexUnlock') {*};
}

class xmlRMutex is repr('CPointer') {
    sub xmlNewRMutex( --> xmlRMutex) is native(LIB) {*};

    method Free() is native(LIB) is symbol('xmlFreeRMutex') {*};
    method Lock() is native(LIB) is symbol('xmlRMutexLock') {*};
    method Unlock() is native(LIB) is symbol('xmlRMutexUnlock') {*};
}

sub xmlCleanupThreads() is native(LIB) {*};
sub xmlDllMain(Pointer $hinstDLL, unsigned long $fdwReason, Pointer $lpvReserved --> int32) is native(LIB) {*};
sub xmlGetThreadId( --> int32) is native(LIB) {*};
sub xmlInitThreads() is native(LIB) {*};
sub xmlIsMainThread( --> int32) is native(LIB) {*};
sub xmlLockLibrary() is native(LIB) {*};
sub xmlUnlockLibrary() is native(LIB) {*};
