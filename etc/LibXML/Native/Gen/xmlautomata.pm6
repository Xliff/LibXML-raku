use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::xmlautomata;
# API to build regexp automata:
#    the API to build regexp automata 
use LibXML::Native::Defs :LIB, :XmlCharP;

struct xmlAutomata is repr('CPointer') {
}

struct xmlAutomataState is repr('CPointer') {
}

sub xmlAutomataCompile(xmlAutomataPtr $am --> xmlRegexpPtr) is native(LIB) {*};
sub xmlAutomataGetInitState(xmlAutomataPtr $am --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataIsDeterminist(xmlAutomataPtr $am --> int32) is native(LIB) {*};
sub xmlAutomataNewAllTrans(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to, int32 $lax --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewCountTrans(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to, xmlCharP $token, int32 $min, int32 $max, Pointer $data --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewCountTrans2(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to, xmlCharP $token, xmlCharP $token2, int32 $min, int32 $max, Pointer $data --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewCountedTrans(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to, int32 $counter --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewCounter(xmlAutomataPtr $am, int32 $min, int32 $max --> int32) is native(LIB) {*};
sub xmlAutomataNewCounterTrans(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to, int32 $counter --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewEpsilon(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewNegTrans(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to, xmlCharP $token, xmlCharP $token2, Pointer $data --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewOnceTrans(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to, xmlCharP $token, int32 $min, int32 $max, Pointer $data --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewOnceTrans2(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to, xmlCharP $token, xmlCharP $token2, int32 $min, int32 $max, Pointer $data --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewState(xmlAutomataPtr $am --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewTransition(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to, xmlCharP $token, Pointer $data --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataNewTransition2(xmlAutomataPtr $am, xmlAutomataStatePtr $from, xmlAutomataStatePtr $to, xmlCharP $token, xmlCharP $token2, Pointer $data --> xmlAutomataStatePtr) is native(LIB) {*};
sub xmlAutomataSetFinalState(xmlAutomataPtr $am, xmlAutomataStatePtr $state --> int32) is native(LIB) {*};
sub xmlFreeAutomata(xmlAutomataPtr $am) is native(LIB) {*};
sub xmlNewAutomata( --> xmlAutomataPtr) is native(LIB) {*};
