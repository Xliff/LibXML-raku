use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::xmlregexp;
# regular expressions handling:
#    basic API for libxml regular expressions handling used for XML Schemas and validation. 
use LibXML::Native::Defs :LIB, :XmlCharP;

enum xmlExpNodeType is export {
    XML_EXP_ATOM => 2,
    XML_EXP_COUNT => 5,
    XML_EXP_EMPTY => 0,
    XML_EXP_FORBID => 1,
    XML_EXP_OR => 4,
    XML_EXP_SEQ => 3,
}

struct xmlExpCtxt is repr('CPointer') {
}

struct xmlExpNode is repr('CPointer') {
}

struct xmlRegExecCtxt is repr('CPointer') {
}

struct xmlRegexp is repr('CPointer') {
}

sub xmlExpCtxtNbCons(xmlExpCtxtPtr $ctxt --> int32) is native(LIB) {*};
sub xmlExpCtxtNbNodes(xmlExpCtxtPtr $ctxt --> int32) is native(LIB) {*};
sub xmlExpDump(xmlBufferPtr $buf, xmlExpNodePtr $expr) is native(LIB) {*};
sub xmlExpExpDerive(xmlExpCtxtPtr $ctxt, xmlExpNodePtr $exp, xmlExpNodePtr $sub --> xmlExpNodePtr) is native(LIB) {*};
sub xmlExpFree(xmlExpCtxtPtr $ctxt, xmlExpNodePtr $exp) is native(LIB) {*};
sub xmlExpFreeCtxt(xmlExpCtxtPtr $ctxt) is native(LIB) {*};
sub xmlExpGetLanguage(xmlExpCtxtPtr $ctxt, xmlExpNodePtr $exp, const xmlChar ** $langList, int32 $len --> int32) is native(LIB) {*};
sub xmlExpGetStart(xmlExpCtxtPtr $ctxt, xmlExpNodePtr $exp, const xmlChar ** $tokList, int32 $len --> int32) is native(LIB) {*};
sub xmlExpIsNillable(xmlExpNodePtr $exp --> int32) is native(LIB) {*};
sub xmlExpMaxToken(xmlExpNodePtr $expr --> int32) is native(LIB) {*};
sub xmlExpNewAtom(xmlExpCtxtPtr $ctxt, xmlCharP $name, int32 $len --> xmlExpNodePtr) is native(LIB) {*};
sub xmlExpNewCtxt(int32 $maxNodes, xmlDictPtr $dict --> xmlExpCtxtPtr) is native(LIB) {*};
sub xmlExpNewOr(xmlExpCtxtPtr $ctxt, xmlExpNodePtr $left, xmlExpNodePtr $right --> xmlExpNodePtr) is native(LIB) {*};
sub xmlExpNewRange(xmlExpCtxtPtr $ctxt, xmlExpNodePtr $subset, int32 $min, int32 $max --> xmlExpNodePtr) is native(LIB) {*};
sub xmlExpNewSeq(xmlExpCtxtPtr $ctxt, xmlExpNodePtr $left, xmlExpNodePtr $right --> xmlExpNodePtr) is native(LIB) {*};
sub xmlExpParse(xmlExpCtxtPtr $ctxt, Str $expr --> xmlExpNodePtr) is native(LIB) {*};
sub xmlExpRef(xmlExpNodePtr $exp) is native(LIB) {*};
sub xmlExpStringDerive(xmlExpCtxtPtr $ctxt, xmlExpNodePtr $exp, xmlCharP $str, int32 $len --> xmlExpNodePtr) is native(LIB) {*};
sub xmlExpSubsume(xmlExpCtxtPtr $ctxt, xmlExpNodePtr $exp, xmlExpNodePtr $sub --> int32) is native(LIB) {*};
sub xmlRegExecErrInfo(xmlRegExecCtxtPtr $exec, const xmlChar ** $string, Pointer[int32] $nbval, Pointer[int32] $nbneg, xmlChar ** $values, Pointer[int32] $terminal --> int32) is native(LIB) {*};
sub xmlRegExecNextValues(xmlRegExecCtxtPtr $exec, Pointer[int32] $nbval, Pointer[int32] $nbneg, xmlChar ** $values, Pointer[int32] $terminal --> int32) is native(LIB) {*};
sub xmlRegExecPushString(xmlRegExecCtxtPtr $exec, xmlCharP $value, Pointer $data --> int32) is native(LIB) {*};
sub xmlRegExecPushString2(xmlRegExecCtxtPtr $exec, xmlCharP $value, xmlCharP $value2, Pointer $data --> int32) is native(LIB) {*};
sub xmlRegFreeExecCtxt(xmlRegExecCtxtPtr $exec) is native(LIB) {*};
sub xmlRegFreeRegexp(xmlRegexpPtr $regexp) is native(LIB) {*};
sub xmlRegNewExecCtxt(xmlRegexpPtr $comp, xmlRegExecCallbacks $callback, Pointer $data --> xmlRegExecCtxtPtr) is native(LIB) {*};
sub xmlRegexpCompile(xmlCharP $regexp --> xmlRegexpPtr) is native(LIB) {*};
sub xmlRegexpExec(xmlRegexpPtr $comp, xmlCharP $content --> int32) is native(LIB) {*};
sub xmlRegexpIsDeterminist(xmlRegexpPtr $comp --> int32) is native(LIB) {*};
sub xmlRegexpPrint(FILE * $output, xmlRegexpPtr $regexp) is native(LIB) {*};
