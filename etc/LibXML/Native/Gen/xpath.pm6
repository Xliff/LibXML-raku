use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::xpath;
# XML Path Language implementation:
#    API for the XML Path Language implementation  XML Path Language implementation XPath is a language for addressing parts of an XML document, designed to be used by both XSLT and XPointer
use LibXML::Native::Defs :LIB, :XmlCharP;

enum xmlXPathError is export {
    XPATH_ENCODING_ERROR => 20,
    XPATH_EXPRESSION_OK => 0,
    XPATH_EXPR_ERROR => 7,
    XPATH_FORBID_VARIABLE_ERROR => 24,
    XPATH_INVALID_ARITY => 12,
    XPATH_INVALID_CHAR_ERROR => 21,
    XPATH_INVALID_CTXT => 22,
    XPATH_INVALID_CTXT_POSITION => 14,
    XPATH_INVALID_CTXT_SIZE => 13,
    XPATH_INVALID_OPERAND => 10,
    XPATH_INVALID_PREDICATE_ERROR => 6,
    XPATH_INVALID_TYPE => 11,
    XPATH_MEMORY_ERROR => 15,
    XPATH_NUMBER_ERROR => 1,
    XPATH_STACK_ERROR => 23,
    XPATH_START_LITERAL_ERROR => 3,
    XPATH_UNCLOSED_ERROR => 8,
    XPATH_UNDEF_PREFIX_ERROR => 19,
    XPATH_UNDEF_VARIABLE_ERROR => 5,
    XPATH_UNFINISHED_LITERAL_ERROR => 2,
    XPATH_UNKNOWN_FUNC_ERROR => 9,
    XPATH_VARIABLE_REF_ERROR => 4,
    XPTR_RESOURCE_ERROR => 17,
    XPTR_SUB_RESOURCE_ERROR => 18,
    XPTR_SYNTAX_ERROR => 16,
}

enum xmlXPathObjectType is export {
    XPATH_BOOLEAN => 2,
    XPATH_LOCATIONSET => 7,
    XPATH_NODESET => 1,
    XPATH_NUMBER => 3,
    XPATH_POINT => 5,
    XPATH_RANGE => 6,
    XPATH_STRING => 4,
    XPATH_UNDEFINED => 0,
    XPATH_USERS => 8,
    XPATH_XSLT_TREE => 9,
}

struct xmlNodeSet is repr('CStruct') {
    has int32 $.nodeNr; # number of nodes in the set
    has int32 $.nodeMax; # size of the array as allocated
    has xmlNodePtr * $.nodeTab; # array of nodes in no particular order @@ with_ns to check wether namespace nodes should be looked at @@
}

struct xmlXPathAxis is repr('CStruct') {
    has xmlCharP $.name; # the axis name
    has xmlXPathAxisFunc $.func; # the search function
}

struct xmlXPathCompExpr is repr('CPointer') {
}

struct xmlXPathContext is repr('CStruct') {
    has xmlDocPtr $.doc; # The current document
    has xmlNodePtr $.node; # The current node
    has int32 $.nb_variables_unused; # unused (hash table)
    has int32 $.max_variables_unused; # unused (hash table)
    has xmlHashTablePtr $.varHash; # Hash table of defined variables
    has int32 $.nb_types; # number of defined types
    has int32 $.max_types; # max number of types
    has xmlXPathTypePtr $.types; # Array of defined types
    has int32 $.nb_funcs_unused; # unused (hash table)
    has int32 $.max_funcs_unused; # unused (hash table)
    has xmlHashTablePtr $.funcHash; # Hash table of defined funcs
    has int32 $.nb_axis; # number of defined axis
    has int32 $.max_axis; # max number of axis
    has xmlXPathAxisPtr $.axis; # Array of defined axis the namespace nodes of the context node
    has xmlNsPtr * $.namespaces; # Array of namespaces
    has int32 $.nsNr; # number of namespace in scope
    has Pointer $.user; # function to free extra variables
    has int32 $.contextSize; # the context size
    has int32 $.proximityPosition; # the proximity position extra stuff for XPointer
    has int32 $.xptr; # is this an XPointer context?
    has xmlNodePtr $.here; # for here()
    has xmlNodePtr $.origin; # for origin() the set of namespace declarations in scope for the expression
    has xmlHashTablePtr $.nsHash; # The namespaces hash table
    has xmlXPathVariableLookupFunc $.varLookupFunc; # variable lookup func
    has Pointer $.varLookupData; # variable lookup data Possibility to link in an extra item
    has Pointer $.extra; # needed for XSLT The function name and URI when calling a function
    has xmlCharP $.function;
    has xmlCharP $.functionURI; # function lookup function and data
    has xmlXPathFuncLookupFunc $.funcLookupFunc; # function lookup func
    has Pointer $.funcLookupData; # function lookup data temporary namespace lists kept for walking the namespace axis
    has xmlNsPtr * $.tmpNsList; # Array of namespaces
    has int32 $.tmpNsNr; # number of namespaces in scope error reporting mechanism
    has Pointer $.userData; # user specific data block
    has xmlStructuredErrorFunc $.error; # the callback in case of errors
    has xmlError $.lastError; # the last error
    has xmlNodePtr $.debugNode; # the source node XSLT dictionary
    has xmlDictPtr $.dict; # dictionary if any
    has int32 $.flags; # flags to control compilation Cache for reusal of XPath objects
    has Pointer $.cache;
}

struct xmlXPathFunct is repr('CStruct') {
    has xmlCharP $.name; # the function name
    has xmlXPathEvalFunc $.func; # the evaluation function
}

struct xmlXPathObject is repr('CStruct') {
    has xmlXPathObjectType $.type;
    has xmlNodeSetPtr $.nodesetval;
    has int32 $.boolval;
    has num64 $.floatval;
    has xmlCharP $.stringval;
    has Pointer $.user;
    has int32 $.index;
    has Pointer $.user2;
    has int32 $.index2;
}

struct xmlXPathParserContext is repr('CStruct') {
    has xmlCharP $.cur; # the current char being parsed
    has xmlCharP $.base; # the full expression
    has int32 $.error; # error code
    has xmlXPathContextPtr $.context; # the evaluation context
    has xmlXPathObjectPtr $.value; # the current value
    has int32 $.valueNr; # number of values stacked
    has int32 $.valueMax; # max number of values stacked
    has xmlXPathObjectPtr * $.valueTab; # stack of values
    has xmlXPathCompExprPtr $.comp; # the precompiled expression
    has int32 $.xptr; # it this an XPointer expression
    has xmlNodePtr $.ancestor; # used for walking preceding axis
    has int32 $.valueFrame; # used to limit Pop on the stack
}

struct xmlXPathType is repr('CStruct') {
    has xmlCharP $.name; # the type name
    has xmlXPathConvertFunc $.func; # the conversion function
}

struct xmlXPathVariable is repr('CStruct') {
    has xmlCharP $.name; # the variable name
    has xmlXPathObjectPtr $.value; # the value
}

sub xmlXPathCastBooleanToNumber(int32 $val --> num64) is native(LIB) {*};
sub xmlXPathCastBooleanToString(int32 $val --> xmlCharP) is native(LIB) {*};
sub xmlXPathCastNodeSetToBoolean(xmlNodeSetPtr $ns --> int32) is native(LIB) {*};
sub xmlXPathCastNodeSetToNumber(xmlNodeSetPtr $ns --> num64) is native(LIB) {*};
sub xmlXPathCastNodeSetToString(xmlNodeSetPtr $ns --> xmlCharP) is native(LIB) {*};
sub xmlXPathCastNodeToNumber(xmlNodePtr $node --> num64) is native(LIB) {*};
sub xmlXPathCastNodeToString(xmlNodePtr $node --> xmlCharP) is native(LIB) {*};
sub xmlXPathCastNumberToBoolean(num64 $val --> int32) is native(LIB) {*};
sub xmlXPathCastNumberToString(num64 $val --> xmlCharP) is native(LIB) {*};
sub xmlXPathCastStringToBoolean(xmlCharP $val --> int32) is native(LIB) {*};
sub xmlXPathCastStringToNumber(xmlCharP $val --> num64) is native(LIB) {*};
sub xmlXPathCastToBoolean(xmlXPathObjectPtr $val --> int32) is native(LIB) {*};
sub xmlXPathCastToNumber(xmlXPathObjectPtr $val --> num64) is native(LIB) {*};
sub xmlXPathCastToString(xmlXPathObjectPtr $val --> xmlCharP) is native(LIB) {*};
sub xmlXPathCmpNodes(xmlNodePtr $node1, xmlNodePtr $node2 --> int32) is native(LIB) {*};
sub xmlXPathCompile(xmlCharP $str --> xmlXPathCompExprPtr) is native(LIB) {*};
sub xmlXPathCompiledEval(xmlXPathCompExprPtr $comp, xmlXPathContextPtr $ctx --> xmlXPathObjectPtr) is native(LIB) {*};
sub xmlXPathCompiledEvalToBoolean(xmlXPathCompExprPtr $comp, xmlXPathContextPtr $ctxt --> int32) is native(LIB) {*};
sub xmlXPathContextSetCache(xmlXPathContextPtr $ctxt, int32 $active, int32 $value, int32 $options --> int32) is native(LIB) {*};
sub xmlXPathConvertBoolean(xmlXPathObjectPtr $val --> xmlXPathObjectPtr) is native(LIB) {*};
sub xmlXPathConvertNumber(xmlXPathObjectPtr $val --> xmlXPathObjectPtr) is native(LIB) {*};
sub xmlXPathConvertString(xmlXPathObjectPtr $val --> xmlXPathObjectPtr) is native(LIB) {*};
sub xmlXPathCtxtCompile(xmlXPathContextPtr $ctxt, xmlCharP $str --> xmlXPathCompExprPtr) is native(LIB) {*};
sub xmlXPathEval(xmlCharP $str, xmlXPathContextPtr $ctx --> xmlXPathObjectPtr) is native(LIB) {*};
sub xmlXPathEvalExpression(xmlCharP $str, xmlXPathContextPtr $ctxt --> xmlXPathObjectPtr) is native(LIB) {*};
sub xmlXPathEvalPredicate(xmlXPathContextPtr $ctxt, xmlXPathObjectPtr $res --> int32) is native(LIB) {*};
sub xmlXPathFreeCompExpr(xmlXPathCompExprPtr $comp) is native(LIB) {*};
sub xmlXPathFreeContext(xmlXPathContextPtr $ctxt) is native(LIB) {*};
sub xmlXPathFreeNodeSet(xmlNodeSetPtr $obj) is native(LIB) {*};
sub xmlXPathFreeNodeSetList(xmlXPathObjectPtr $obj) is native(LIB) {*};
sub xmlXPathFreeObject(xmlXPathObjectPtr $obj) is native(LIB) {*};
sub xmlXPathInit() is native(LIB) {*};
sub xmlXPathIsInf(num64 $val --> int32) is native(LIB) {*};
sub xmlXPathIsNaN(num64 $val --> int32) is native(LIB) {*};
sub xmlXPathNewContext(xmlDocPtr $doc --> xmlXPathContextPtr) is native(LIB) {*};
sub xmlXPathNodeEval(xmlNodePtr $node, xmlCharP $str, xmlXPathContextPtr $ctx --> xmlXPathObjectPtr) is native(LIB) {*};
sub xmlXPathNodeSetCreate(xmlNodePtr $val --> xmlNodeSetPtr) is native(LIB) {*};
sub xmlXPathObjectCopy(xmlXPathObjectPtr $val --> xmlXPathObjectPtr) is native(LIB) {*};
sub xmlXPathOrderDocElems(xmlDocPtr $doc --> long) is native(LIB) {*};
sub xmlXPathSetContextNode(xmlNodePtr $node, xmlXPathContextPtr $ctx --> int32) is native(LIB) {*};
