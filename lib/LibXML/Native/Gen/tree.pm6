use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::tree;
# interfaces for tree manipulation:
#    this module describes the structures found in an tree resulting from an XML or HTML parsing, as well as the API provided for various processing on that tree 
use LibXML::Native::Defs :LIB, :XmlCharP;

enum xmlAttributeDefault is export {
    XML_ATTRIBUTE_FIXED => 4,
    XML_ATTRIBUTE_IMPLIED => 3,
    XML_ATTRIBUTE_NONE => 1,
    XML_ATTRIBUTE_REQUIRED => 2,
}

enum xmlAttributeType is export {
    XML_ATTRIBUTE_CDATA => 1,
    XML_ATTRIBUTE_ENTITIES => 6,
    XML_ATTRIBUTE_ENTITY => 5,
    XML_ATTRIBUTE_ENUMERATION => 9,
    XML_ATTRIBUTE_ID => 2,
    XML_ATTRIBUTE_IDREF => 3,
    XML_ATTRIBUTE_IDREFS => 4,
    XML_ATTRIBUTE_NMTOKEN => 7,
    XML_ATTRIBUTE_NMTOKENS => 8,
    XML_ATTRIBUTE_NOTATION => 10,
}

enum xmlBufferAllocationScheme is export {
    XML_BUFFER_ALLOC_BOUNDED => 6,
    XML_BUFFER_ALLOC_DOUBLEIT => 1,
    XML_BUFFER_ALLOC_EXACT => 2,
    XML_BUFFER_ALLOC_HYBRID => 5,
    XML_BUFFER_ALLOC_IMMUTABLE => 3,
    XML_BUFFER_ALLOC_IO => 4,
}

enum xmlDocProperties is export {
    XML_DOC_DTDVALID => 8,
    XML_DOC_HTML => 128,
    XML_DOC_INTERNAL => 64,
    XML_DOC_NSVALID => 2,
    XML_DOC_OLD10 => 4,
    XML_DOC_USERBUILT => 32,
    XML_DOC_WELLFORMED => 1,
    XML_DOC_XINCLUDE => 16,
}

enum xmlElementContentOccur is export {
    XML_ELEMENT_CONTENT_MULT => 3,
    XML_ELEMENT_CONTENT_ONCE => 1,
    XML_ELEMENT_CONTENT_OPT => 2,
    XML_ELEMENT_CONTENT_PLUS => 4,
}

enum xmlElementContentType is export {
    XML_ELEMENT_CONTENT_ELEMENT => 2,
    XML_ELEMENT_CONTENT_OR => 4,
    XML_ELEMENT_CONTENT_PCDATA => 1,
    XML_ELEMENT_CONTENT_SEQ => 3,
}

enum xmlElementType is export {
    XML_ATTRIBUTE_DECL => 16,
    XML_ATTRIBUTE_NODE => 2,
    XML_CDATA_SECTION_NODE => 4,
    XML_COMMENT_NODE => 8,
    XML_DOCB_DOCUMENT_NODE => 21,
    XML_DOCUMENT_FRAG_NODE => 11,
    XML_DOCUMENT_NODE => 9,
    XML_DOCUMENT_TYPE_NODE => 10,
    XML_DTD_NODE => 14,
    XML_ELEMENT_DECL => 15,
    XML_ELEMENT_NODE => 1,
    XML_ENTITY_DECL => 17,
    XML_ENTITY_NODE => 6,
    XML_ENTITY_REF_NODE => 5,
    XML_HTML_DOCUMENT_NODE => 13,
    XML_NAMESPACE_DECL => 18,
    XML_NOTATION_NODE => 12,
    XML_PI_NODE => 7,
    XML_TEXT_NODE => 3,
    XML_XINCLUDE_END => 20,
    XML_XINCLUDE_START => 19,
}

enum xmlElementTypeVal is export {
    XML_ELEMENT_TYPE_ANY => 2,
    XML_ELEMENT_TYPE_ELEMENT => 4,
    XML_ELEMENT_TYPE_EMPTY => 1,
    XML_ELEMENT_TYPE_MIXED => 3,
    XML_ELEMENT_TYPE_UNDEFINED => 0,
}

struct xmlAttr is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_ATTRIBUTE_NODE, must be second !
    has xmlCharP $.name; # the name of the property
    has struct _xmlNode * $.children; # the value of the property
    has struct _xmlNode * $.last; # NULL
    has struct _xmlNode * $.parent; # child->parent link
    has struct _xmlAttr * $.next; # next sibling link
    has struct _xmlAttr * $.prev; # previous sibling link
    has struct _xmlDoc * $.doc; # the containing document
    has xmlNs * $.ns; # pointer to the associated namespace
    has xmlAttributeType $.atype; # the attribute type if validating
    has Pointer $.psvi; # for type/PSVI informations
    sub xmlHasNsProp(const xmlNode * $node, xmlCharP $name, xmlCharP $nameSpace --> xmlAttr) is native(LIB) {*};
    sub xmlHasProp(const xmlNode * $node, xmlCharP $name --> xmlAttr) is native(LIB) {*};
    method xmlFreeProp( --> void) is native(LIB) {*};
    method xmlFreePropList( --> void) is native(LIB) {*};
    method xmlRemoveProp( --> int32) is native(LIB) {*};
}

struct xmlAttribute is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_ATTRIBUTE_DECL, must be second !
    has xmlCharP $.name; # Attribute name
    has struct _xmlNode * $.children; # NULL
    has struct _xmlNode * $.last; # NULL
    has struct _xmlDtd * $.parent; # -> DTD
    has struct _xmlNode * $.next; # next sibling link
    has struct _xmlNode * $.prev; # previous sibling link
    has struct _xmlDoc * $.doc; # the containing document
    has struct _xmlAttribute * $.nexth; # next in hash table
    has xmlAttributeType $.atype; # The attribute type
    has xmlAttributeDefault $.def; # the default
    has xmlCharP $.defaultValue; # or the default value
    has xmlEnumeration $.tree; # or the enumeration tree if any
    has xmlCharP $.prefix; # the namespace prefix if any
    has xmlCharP $.elem; # Element holding the attribute
}

struct xmlBuf is repr('CPointer') {
    method xmlBufEnd( --> xmlCharP) is native(LIB) {*};
    method xmlBufGetNodeContent(const xmlNode * $cur --> int32) is native(LIB) {*};
    method xmlBufNodeDump(xmlDoc $doc, xmlNode $cur, int32 $level, int32 $format --> size_t) is native(LIB) {*};
    method xmlBufShrink(size_t $len --> size_t) is native(LIB) {*};
}

struct xmlBuffer is repr('CStruct') {
    has xmlCharP $.content; # The buffer content UTF8
    has unsigned int $.use; # The buffer size used
    has unsigned int $.size; # The buffer size
    has xmlBufferAllocationScheme $.alloc; # The realloc method
    has xmlCharP $.contentIO; # in IO mode we may have a different base
    sub xmlBufferCreate( --> xmlBuffer) is native(LIB) {*};
    sub xmlBufferCreateSize(size_t $size --> xmlBuffer) is native(LIB) {*};
    sub xmlBufferCreateStatic(Pointer $mem, size_t $size --> xmlBuffer) is native(LIB) {*};
    method htmlNodeDump(xmlDoc $doc, xmlNode $cur --> int32) is native(LIB) {*};
    method xmlAttrSerializeTxtContent(xmlDoc $doc, xmlAttr $attr, xmlCharP $string --> void) is native(LIB) {*};
    method xmlBufferAdd(xmlCharP $str, int32 $len --> int32) is native(LIB) {*};
    method xmlBufferAddHead(xmlCharP $str, int32 $len --> int32) is native(LIB) {*};
    method xmlBufferCCat(Str $str --> int32) is native(LIB) {*};
    method xmlBufferCat(xmlCharP $str --> int32) is native(LIB) {*};
    method xmlBufferDetach( --> xmlCharP) is native(LIB) {*};
    method xmlBufferEmpty( --> void) is native(LIB) {*};
    method xmlBufferFree( --> void) is native(LIB) {*};
    method xmlBufferGrow(unsigned int $len --> int32) is native(LIB) {*};
    method xmlBufferResize(unsigned int $size --> int32) is native(LIB) {*};
    method xmlBufferSetAllocationScheme(xmlBufferAllocationScheme $scheme --> void) is native(LIB) {*};
    method xmlBufferShrink(unsigned int $len --> int32) is native(LIB) {*};
    method xmlBufferWriteCHAR(xmlCharP $string --> void) is native(LIB) {*};
    method xmlBufferWriteChar(Str $string --> void) is native(LIB) {*};
    method xmlBufferWriteQuotedString(xmlCharP $string --> void) is native(LIB) {*};
    method xmlDumpAttributeDecl(xmlAttribute $attr --> void) is native(LIB) {*};
    method xmlDumpAttributeTable(xmlAttributeTable $table --> void) is native(LIB) {*};
    method xmlDumpElementDecl(xmlElement $elem --> void) is native(LIB) {*};
    method xmlDumpElementTable(xmlElementTable $table --> void) is native(LIB) {*};
    method xmlDumpEntitiesTable(xmlEntitiesTable $table --> void) is native(LIB) {*};
    method xmlDumpEntityDecl(xmlEntity $ent --> void) is native(LIB) {*};
    method xmlDumpNotationDecl(xmlNotation $nota --> void) is native(LIB) {*};
    method xmlDumpNotationTable(xmlNotationTable $table --> void) is native(LIB) {*};
    method xmlExpDump(xmlExpNode $expr --> void) is native(LIB) {*};
    method xmlNewTextWriterMemory(int32 $compression --> xmlTextWriter) is native(LIB) {*};
    method xmlNodeBufGetContent(const xmlNode * $cur --> int32) is native(LIB) {*};
    method xmlNodeDump(xmlDoc $doc, xmlNode $cur, int32 $level, int32 $format --> int32) is native(LIB) {*};
    method xmlOutputBufferCreateBuffer(xmlCharEncodingHandler $encoder --> xmlOutputBuffer) is native(LIB) {*};
    method xmlSaveToBuffer(Str $encoding, int32 $options --> xmlSaveCtxt) is native(LIB) {*};
}

struct xmlDOMWrapCtxt is repr('CStruct') {
    has Pointer $._private; # * The type of this context, just in case we need specialized * contexts in the future. *
    has int32 $.type; # * Internal namespace map used for various operations. *
    has Pointer $.namespaceMap; # * Use this one to acquire an xmlNsPtr intended for node->ns. * (Note that this is not intended for elem->nsDef). *
    has xmlDOMWrapAcquireNsFunction $.getNsForNodeFunc;
    sub xmlDOMWrapNewCtxt( --> xmlDOMWrapCtxt) is native(LIB) {*};
    method xmlDOMWrapAdoptNode(xmlDoc $sourceDoc, xmlNode $node, xmlDoc $destDoc, xmlNode $destParent, int32 $options --> int32) is native(LIB) {*};
    method xmlDOMWrapCloneNode(xmlDoc $sourceDoc, xmlNode $node, xmlNodePtr * $resNode, xmlDoc $destDoc, xmlNode $destParent, int32 $deep, int32 $options --> int32) is native(LIB) {*};
    method xmlDOMWrapFreeCtxt( --> void) is native(LIB) {*};
    method xmlDOMWrapReconcileNamespaces(xmlNode $elem, int32 $options --> int32) is native(LIB) {*};
    method xmlDOMWrapRemoveNode(xmlDoc $doc, xmlNode $node, int32 $options --> int32) is native(LIB) {*};
}

struct xmlDoc is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_DOCUMENT_NODE, must be second !
    has Str $.name; # name/filename/URI of the document
    has struct _xmlNode * $.children; # the document tree
    has struct _xmlNode * $.last; # last child link
    has struct _xmlNode * $.parent; # child->parent link
    has struct _xmlNode * $.next; # next sibling link
    has struct _xmlNode * $.prev; # previous sibling link
    has struct _xmlDoc * $.doc; # autoreference to itself End of common part
    has int32 $.compression; # level of zlib compression
    has int32 $.standalone; # standalone document (no external refs) 1 if standalone="yes" 0 if standalone="no" -1 if there is no XML declaration -2 if there is an XML declaration, but no standalone attribute was specified
    has struct _xmlDtd * $.intSubset; # the document internal subset
    has struct _xmlDtd * $.extSubset; # the document external subset
    has struct _xmlNs * $.oldNs; # Global namespace, the old way
    has xmlCharP $.version; # the XML version string
    has xmlCharP $.encoding; # external initial encoding, if any
    has Pointer $.ids; # Hash table for ID attributes if any
    has Pointer $.refs; # Hash table for IDREFs attributes if any
    has xmlCharP $.URL; # The URI for that document
    has int32 $.charset; # encoding of the in-memory content actually an xmlCharEncoding
    has struct _xmlDict * $.dict; # dict used to allocate names or NULL
    has Pointer $.psvi; # for type/PSVI informations
    has int32 $.parseFlags; # set of xmlParserOption used to parse the document
    has int32 $.properties; # set of xmlDocProperties for this document set at the end of parsing
    sub xmlNewDoc(xmlCharP $version --> xmlDoc) is native(LIB) {*};
    sub xmlParseCatalogFile(Str $filename --> xmlDoc) is native(LIB) {*};
    sub xmlParseDoc(xmlCharP $cur --> xmlDoc) is native(LIB) {*};
    sub xmlParseEntity(Str $filename --> xmlDoc) is native(LIB) {*};
    sub xmlParseFile(Str $filename --> xmlDoc) is native(LIB) {*};
    sub xmlParseMemory(Str $buffer, int32 $size --> xmlDoc) is native(LIB) {*};
    sub xmlReadDoc(xmlCharP $cur, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(LIB) {*};
    sub xmlReadFd(int32 $fd, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(LIB) {*};
    sub xmlReadFile(Str $filename, Str $encoding, int32 $options --> xmlDoc) is native(LIB) {*};
    sub xmlReadIO(xmlInputReadCallback $ioread, xmlInputCloseCallback $ioclose, Pointer $ioctx, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(LIB) {*};
    sub xmlReadMemory(Str $buffer, int32 $size, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(LIB) {*};
    sub xmlRecoverDoc(xmlCharP $cur --> xmlDoc) is native(LIB) {*};
    sub xmlRecoverFile(Str $filename --> xmlDoc) is native(LIB) {*};
    sub xmlRecoverMemory(Str $buffer, int32 $size --> xmlDoc) is native(LIB) {*};
    method htmlDocDumpMemory(xmlChar ** $mem, int * $size --> void) is native(LIB) {*};
    method htmlDocDumpMemoryFormat(xmlChar ** $mem, int * $size, int32 $format --> void) is native(LIB) {*};
    method xlinkIsLink(xmlNode $node --> xlinkType) is native(LIB) {*};
    method xmlAddDocEntity(xmlCharP $name, int32 $type, xmlCharP $ExternalID, xmlCharP $SystemID, xmlCharP $content --> xmlEntity) is native(LIB) {*};
    method xmlAddDtdEntity(xmlCharP $name, int32 $type, xmlCharP $ExternalID, xmlCharP $SystemID, xmlCharP $content --> xmlEntity) is native(LIB) {*};
    method xmlC14NDocDumpMemory(xmlNodeSet $nodes, int32 $mode, xmlChar ** $inclusive_ns_prefixes, int32 $with_comments, xmlChar ** $doc_txt_ptr --> int32) is native(LIB) {*};
    method xmlC14NDocSave(xmlNodeSet $nodes, int32 $mode, xmlChar ** $inclusive_ns_prefixes, int32 $with_comments, Str $filename, int32 $compression --> int32) is native(LIB) {*};
    method xmlC14NDocSaveTo(xmlNodeSet $nodes, int32 $mode, xmlChar ** $inclusive_ns_prefixes, int32 $with_comments, xmlOutputBuffer $buf --> int32) is native(LIB) {*};
    method xmlC14NExecute(xmlC14NIsVisibleCallback $is_visible_callback, Pointer $user_data, int32 $mode, xmlChar ** $inclusive_ns_prefixes, int32 $with_comments, xmlOutputBuffer $buf --> int32) is native(LIB) {*};
    method xmlCopyDoc(int32 $recursive --> xmlDoc) is native(LIB) {*};
    method xmlCopyDocElementContent(xmlElementContent $cur --> xmlElementContent) is native(LIB) {*};
    method xmlCreateIntSubset(xmlCharP $name, xmlCharP $ExternalID, xmlCharP $SystemID --> xmlDtd) is native(LIB) {*};
    method xmlDocCopyNodeList(xmlNode $node --> xmlNode) is native(LIB) {*};
    method xmlDocDumpFormatMemory(xmlChar ** $mem, int * $size, int32 $format --> void) is native(LIB) {*};
    method xmlDocDumpFormatMemoryEnc(xmlChar ** $doc_txt_ptr, int * $doc_txt_len, Str $txt_encoding, int32 $format --> void) is native(LIB) {*};
    method xmlDocDumpMemory(xmlChar ** $mem, int * $size --> void) is native(LIB) {*};
    method xmlDocDumpMemoryEnc(xmlChar ** $doc_txt_ptr, int * $doc_txt_len, Str $txt_encoding --> void) is native(LIB) {*};
    method xmlDocSetRootElement(xmlNode $root --> xmlNode) is native(LIB) {*};
    method xmlEncodeEntities(xmlCharP $input --> xmlCharP) is native(LIB) {*};
    method xmlEncodeEntitiesReentrant(xmlCharP $input --> xmlCharP) is native(LIB) {*};
    method xmlFreeDoc( --> void) is native(LIB) {*};
    method xmlFreeDocElementContent(xmlElementContent $cur --> void) is native(LIB) {*};
    method xmlGetDtdEntity(xmlCharP $name --> xmlEntity) is native(LIB) {*};
    method xmlGetID(xmlCharP $ID --> xmlAttr) is native(LIB) {*};
    method xmlGetParameterEntity(xmlCharP $name --> xmlEntity) is native(LIB) {*};
    method xmlGetRefs(xmlCharP $ID --> xmlList) is native(LIB) {*};
    method xmlIsID(xmlNode $elem, xmlAttr $attr --> int32) is native(LIB) {*};
    method xmlIsMixedElement(xmlCharP $name --> int32) is native(LIB) {*};
    method xmlIsRef(xmlNode $elem, xmlAttr $attr --> int32) is native(LIB) {*};
    method xmlNewCDataBlock(xmlCharP $content, int32 $len --> xmlNode) is native(LIB) {*};
    method xmlNewCharRef(xmlCharP $name --> xmlNode) is native(LIB) {*};
    method xmlNewDocComment(xmlCharP $content --> xmlNode) is native(LIB) {*};
    method xmlNewDocElementContent(xmlCharP $name, xmlElementContentType $type --> xmlElementContent) is native(LIB) {*};
    method xmlNewDocFragment( --> xmlNode) is native(LIB) {*};
    method xmlNewDocNode(xmlNs $ns, xmlCharP $name, xmlCharP $content --> xmlNode) is native(LIB) {*};
    method xmlNewDocNodeEatName(xmlNs $ns, xmlCharP $name, xmlCharP $content --> xmlNode) is native(LIB) {*};
    method xmlNewDocPI(xmlCharP $name, xmlCharP $content --> xmlNode) is native(LIB) {*};
    method xmlNewDocProp(xmlCharP $name, xmlCharP $value --> xmlAttr) is native(LIB) {*};
    method xmlNewDocRawNode(xmlNs $ns, xmlCharP $name, xmlCharP $content --> xmlNode) is native(LIB) {*};
    method xmlNewDocTextLen(xmlCharP $content, int32 $len --> xmlNode) is native(LIB) {*};
    method xmlNewDtd(xmlCharP $name, xmlCharP $ExternalID, xmlCharP $SystemID --> xmlDtd) is native(LIB) {*};
    method xmlNewEntity(xmlCharP $name, int32 $type, xmlCharP $ExternalID, xmlCharP $SystemID, xmlCharP $content --> xmlEntity) is native(LIB) {*};
    method xmlNewGlobalNs(xmlCharP $href, xmlCharP $prefix --> xmlNs) is native(LIB) {*};
    method xmlNewTextWriterTree(xmlNode $node, int32 $compression --> xmlTextWriter) is native(LIB) {*};
    method xmlNodeListGetString(const xmlNode * $list, int32 $inLine --> xmlCharP) is native(LIB) {*};
    method xmlParseBalancedChunkMemory(xmlSAXHandler $sax, Pointer $user_data, int32 $depth, xmlCharP $string, xmlNodePtr * $lst --> int32) is native(LIB) {*};
    method xmlParseBalancedChunkMemoryRecover(xmlSAXHandler $sax, Pointer $user_data, int32 $depth, xmlCharP $string, xmlNodePtr * $lst, int32 $recover --> int32) is native(LIB) {*};
    method xmlParseExternalEntity(xmlSAXHandler $sax, Pointer $user_data, int32 $depth, xmlCharP $URL, xmlCharP $ID, xmlNodePtr * $lst --> int32) is native(LIB) {*};
    method xmlReaderWalker( --> xmlTextReader) is native(LIB) {*};
    method xmlReconciliateNs(xmlNode $tree --> int32) is native(LIB) {*};
    method xmlRelaxNGNewDocParserCtxt( --> xmlRelaxNGParserCtxt) is native(LIB) {*};
    method xmlRemoveID(xmlAttr $attr --> int32) is native(LIB) {*};
    method xmlRemoveRef(xmlAttr $attr --> int32) is native(LIB) {*};
    method xmlSchemaNewDocParserCtxt( --> xmlSchemaParserCtxt) is native(LIB) {*};
    method xmlSchematronNewDocParserCtxt( --> xmlSchematronParserCtxt) is native(LIB) {*};
    method xmlSearchNs(xmlNode $node, xmlCharP $nameSpace --> xmlNs) is native(LIB) {*};
    method xmlSearchNsByHref(xmlNode $node, xmlCharP $href --> xmlNs) is native(LIB) {*};
    method xmlSetDocCompressMode(int32 $mode --> void) is native(LIB) {*};
    method xmlShell(Str $filename, xmlShellReadlineFunc $input, FILE * $output --> void) is native(LIB) {*};
    method xmlValidNormalizeAttributeValue(xmlNode $elem, xmlCharP $name, xmlCharP $value --> xmlCharP) is native(LIB) {*};
    method xmlXIncludeNewContext( --> xmlXIncludeCtxt) is native(LIB) {*};
    method xmlXIncludeProcess( --> int32) is native(LIB) {*};
    method xmlXIncludeProcessFlags(int32 $flags --> int32) is native(LIB) {*};
    method xmlXIncludeProcessFlagsData(int32 $flags, Pointer $data --> int32) is native(LIB) {*};
    method xmlXPathNewContext( --> xmlXPathContext) is native(LIB) {*};
    method xmlXPathOrderDocElems( --> long) is native(LIB) {*};
    method xmlXPtrNewContext(xmlNode $here, xmlNode $origin --> xmlXPathContext) is native(LIB) {*};
}

struct xmlDtd is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_DTD_NODE, must be second !
    has xmlCharP $.name; # Name of the DTD
    has struct _xmlNode * $.children; # the value of the property link
    has struct _xmlNode * $.last; # last child link
    has struct _xmlDoc * $.parent; # child->parent link
    has struct _xmlNode * $.next; # next sibling link
    has struct _xmlNode * $.prev; # previous sibling link
    has struct _xmlDoc * $.doc; # the containing document End of common part
    has Pointer $.notations; # Hash table for notations if any
    has Pointer $.elements; # Hash table for elements if any
    has Pointer $.attributes; # Hash table for attributes if any
    has Pointer $.entities; # Hash table for entities if any
    has xmlCharP $.ExternalID; # External identifier for PUBLIC DTD
    has xmlCharP $.SystemID; # URI for a SYSTEM or PUBLIC DTD
    has Pointer $.pentities; # Hash table for param entities if any
    sub xmlGetIntSubset(const xmlDoc * $doc --> xmlDtd) is native(LIB) {*};
    sub xmlParseDTD(xmlCharP $ExternalID, xmlCharP $SystemID --> xmlDtd) is native(LIB) {*};
    method xmlCopyDtd( --> xmlDtd) is native(LIB) {*};
    method xmlFreeDtd( --> void) is native(LIB) {*};
    method xmlGetDtdAttrDesc(xmlCharP $elem, xmlCharP $name --> xmlAttribute) is native(LIB) {*};
    method xmlGetDtdElementDesc(xmlCharP $name --> xmlElement) is native(LIB) {*};
    method xmlGetDtdNotationDesc(xmlCharP $name --> xmlNotation) is native(LIB) {*};
    method xmlGetDtdQAttrDesc(xmlCharP $elem, xmlCharP $name, xmlCharP $prefix --> xmlAttribute) is native(LIB) {*};
    method xmlGetDtdQElementDesc(xmlCharP $name, xmlCharP $prefix --> xmlElement) is native(LIB) {*};
}

struct xmlElement is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_ELEMENT_DECL, must be second !
    has xmlCharP $.name; # Element name
    has struct _xmlNode * $.children; # NULL
    has struct _xmlNode * $.last; # NULL
    has struct _xmlDtd * $.parent; # -> DTD
    has struct _xmlNode * $.next; # next sibling link
    has struct _xmlNode * $.prev; # previous sibling link
    has struct _xmlDoc * $.doc; # the containing document
    has xmlElementTypeVal $.etype; # The type
    has xmlElementContent $.content; # the allowed element content
    has xmlAttribute $.attributes; # List of the declared attributes
    has xmlCharP $.prefix; # the namespace prefix if any
    has xmlRegexp $.contModel; # the validating regexp
    has Pointer $.contModel;
}

struct xmlElementContent is repr('CStruct') {
    has xmlElementContentType $.type; # PCDATA, ELEMENT, SEQ or OR
    has xmlElementContentOccur $.ocur; # ONCE, OPT, MULT or PLUS
    has xmlCharP $.name; # Element name
    has struct _xmlElementContent * $.c1; # first child
    has struct _xmlElementContent * $.c2; # second child
    has struct _xmlElementContent * $.parent; # parent
    has xmlCharP $.prefix; # Namespace prefix
    sub xmlNewElementContent(xmlCharP $name, xmlElementContentType $type --> xmlElementContent) is native(LIB) {*};
    method xmlCopyElementContent( --> xmlElementContent) is native(LIB) {*};
    method xmlFreeElementContent( --> void) is native(LIB) {*};
}

struct xmlEntity is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_ENTITY_DECL, must be second !
    has xmlCharP $.name; # Entity name
    has struct _xmlNode * $.children; # First child link
    has struct _xmlNode * $.last; # Last child link
    has struct _xmlDtd * $.parent; # -> DTD
    has struct _xmlNode * $.next; # next sibling link
    has struct _xmlNode * $.prev; # previous sibling link
    has struct _xmlDoc * $.doc; # the containing document
    has xmlCharP $.orig; # content without ref substitution
    has xmlCharP $.content; # content or ndata if unparsed
    has int32 $.length; # the content length
    has xmlEntityType $.etype; # The entity type
    has xmlCharP $.ExternalID; # External identifier for PUBLIC
    has xmlCharP $.SystemID; # URI for a SYSTEM or PUBLIC Entity
    has struct _xmlEntity * $.nexte; # unused
    has xmlCharP $.URI; # the full URI as computed
    has int32 $.owner; # does the entity own the childrens
    has int32 $.checked; # was the entity content checked this is also used to count entities * references done from that entity * and if it contains '<'
    sub getEntity(Pointer $ctx, xmlCharP $name --> xmlEntity) is native(LIB) {*};
    sub getParameterEntity(Pointer $ctx, xmlCharP $name --> xmlEntity) is native(LIB) {*};
    sub xmlGetDocEntity(const xmlDoc * $doc, xmlCharP $name --> xmlEntity) is native(LIB) {*};
    sub xmlGetPredefinedEntity(xmlCharP $name --> xmlEntity) is native(LIB) {*};
    sub xmlSAX2GetEntity(Pointer $ctx, xmlCharP $name --> xmlEntity) is native(LIB) {*};
    sub xmlSAX2GetParameterEntity(Pointer $ctx, xmlCharP $name --> xmlEntity) is native(LIB) {*};
}

struct xmlEnumeration is repr('CStruct') {
    has struct _xmlEnumeration * $.next; # next one
    has xmlCharP $.name; # Enumeration name
    sub xmlCreateEnumeration(xmlCharP $name --> xmlEnumeration) is native(LIB) {*};
    method xmlCopyEnumeration( --> xmlEnumeration) is native(LIB) {*};
    method xmlFreeEnumeration( --> void) is native(LIB) {*};
}

struct xmlID is repr('CStruct') {
    has struct _xmlID * $.next; # next ID
    has xmlCharP $.value; # The ID name
    has xmlAttr $.attr; # The attribute holding it
    has xmlCharP $.name; # The attribute if attr is not available
    has int32 $.lineno; # The line number if attr is not available
    has struct _xmlDoc * $.doc; # The document holding the ID
}

struct xmlNode is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # type number, must be second !
    has xmlCharP $.name; # the name of the node, or the entity
    has struct _xmlNode * $.children; # parent->childs link
    has struct _xmlNode * $.last; # last child link
    has struct _xmlNode * $.parent; # child->parent link
    has struct _xmlNode * $.next; # next sibling link
    has struct _xmlNode * $.prev; # previous sibling link
    has struct _xmlDoc * $.doc; # the containing document End of common part
    has xmlNs * $.ns; # pointer to the associated namespace
    has xmlCharP $.content; # the content
    has struct _xmlAttr * $.properties; # properties list
    has xmlNs * $.nsDef; # namespace definitions on this node
    has Pointer $.psvi; # for type/PSVI informations
    has unsigned short $.line; # line number
    has unsigned short $.extra; # extra data for XPath/XSLT
    sub xmlDocGetRootElement(const xmlDoc * $doc --> xmlNode) is native(LIB) {*};
    sub xmlGetLastChild(const xmlNode * $parent --> xmlNode) is native(LIB) {*};
    sub xmlNewComment(xmlCharP $content --> xmlNode) is native(LIB) {*};
    sub xmlNewDocText(const xmlDoc * $doc, xmlCharP $content --> xmlNode) is native(LIB) {*};
    sub xmlNewPI(xmlCharP $name, xmlCharP $content --> xmlNode) is native(LIB) {*};
    sub xmlNewReference(const xmlDoc * $doc, xmlCharP $name --> xmlNode) is native(LIB) {*};
    sub xmlNewText(xmlCharP $content --> xmlNode) is native(LIB) {*};
    sub xmlNewTextLen(xmlCharP $content, int32 $len --> xmlNode) is native(LIB) {*};
    sub xmlStringGetNodeList(const xmlDoc * $doc, xmlCharP $value --> xmlNode) is native(LIB) {*};
    sub xmlStringLenGetNodeList(const xmlDoc * $doc, xmlCharP $value, int32 $len --> xmlNode) is native(LIB) {*};
    method xmlAddChild(xmlNode $cur --> xmlNode) is native(LIB) {*};
    method xmlAddChildList(xmlNode $cur --> xmlNode) is native(LIB) {*};
    method xmlAddNextSibling(xmlNode $elem --> xmlNode) is native(LIB) {*};
    method xmlAddPrevSibling(xmlNode $elem --> xmlNode) is native(LIB) {*};
    method xmlAddSibling(xmlNode $elem --> xmlNode) is native(LIB) {*};
    method xmlChildElementCount( --> unsigned long) is native(LIB) {*};
    method xmlCopyNode(int32 $extended --> xmlNode) is native(LIB) {*};
    method xmlCopyNodeList( --> xmlNode) is native(LIB) {*};
    method xmlCopyProp(xmlAttr $cur --> xmlAttr) is native(LIB) {*};
    method xmlCopyPropList(xmlAttr $cur --> xmlAttr) is native(LIB) {*};
    method xmlDocCopyNode(xmlDoc $doc, int32 $extended --> xmlNode) is native(LIB) {*};
    method xmlFirstElementChild( --> xmlNode) is native(LIB) {*};
    method xmlFreeNode( --> void) is native(LIB) {*};
    method xmlFreeNodeList( --> void) is native(LIB) {*};
    method xmlLastElementChild( --> xmlNode) is native(LIB) {*};
    method xmlLsCountNode( --> int32) is native(LIB) {*};
    method xmlNewChild(xmlNs $ns, xmlCharP $name, xmlCharP $content --> xmlNode) is native(LIB) {*};
    method xmlNewNs(xmlCharP $href, xmlCharP $prefix --> xmlNs) is native(LIB) {*};
    method xmlNewNsProp(xmlNs $ns, xmlCharP $name, xmlCharP $value --> xmlAttr) is native(LIB) {*};
    method xmlNewNsPropEatName(xmlNs $ns, xmlCharP $name, xmlCharP $value --> xmlAttr) is native(LIB) {*};
    method xmlNewProp(xmlCharP $name, xmlCharP $value --> xmlAttr) is native(LIB) {*};
    method xmlNewTextChild(xmlNs $ns, xmlCharP $name, xmlCharP $content --> xmlNode) is native(LIB) {*};
    method xmlNextElementSibling( --> xmlNode) is native(LIB) {*};
    method xmlNodeAddContent(xmlCharP $content --> void) is native(LIB) {*};
    method xmlNodeAddContentLen(xmlCharP $content, int32 $len --> void) is native(LIB) {*};
    method xmlNodeSetBase(xmlCharP $uri --> void) is native(LIB) {*};
    method xmlNodeSetContent(xmlCharP $content --> void) is native(LIB) {*};
    method xmlNodeSetContentLen(xmlCharP $content, int32 $len --> void) is native(LIB) {*};
    method xmlNodeSetLang(xmlCharP $lang --> void) is native(LIB) {*};
    method xmlNodeSetName(xmlCharP $name --> void) is native(LIB) {*};
    method xmlNodeSetSpacePreserve(int32 $val --> void) is native(LIB) {*};
    method xmlParseInNodeContext(Str $data, int32 $datalen, int32 $options, xmlNodePtr * $lst --> xmlParserErrors) is native(LIB) {*};
    method xmlPreviousElementSibling( --> xmlNode) is native(LIB) {*};
    method xmlReplaceNode(xmlNode $cur --> xmlNode) is native(LIB) {*};
    method xmlSetListDoc(xmlDoc $doc --> void) is native(LIB) {*};
    method xmlSetNs(xmlNs $ns --> void) is native(LIB) {*};
    method xmlSetNsProp(xmlNs $ns, xmlCharP $name, xmlCharP $value --> xmlAttr) is native(LIB) {*};
    method xmlSetProp(xmlCharP $name, xmlCharP $value --> xmlAttr) is native(LIB) {*};
    method xmlSetTreeDoc(xmlDoc $doc --> void) is native(LIB) {*};
    method xmlShellPrintNode( --> void) is native(LIB) {*};
    method xmlTextConcat(xmlCharP $content, int32 $len --> int32) is native(LIB) {*};
    method xmlTextMerge(xmlNode $second --> xmlNode) is native(LIB) {*};
    method xmlUnlinkNode( --> void) is native(LIB) {*};
    method xmlUnsetNsProp(xmlNs $ns, xmlCharP $name --> int32) is native(LIB) {*};
    method xmlUnsetProp(xmlCharP $name --> int32) is native(LIB) {*};
    method xmlXIncludeProcessTree( --> int32) is native(LIB) {*};
    method xmlXIncludeProcessTreeFlags(int32 $flags --> int32) is native(LIB) {*};
    method xmlXIncludeProcessTreeFlagsData(int32 $flags, Pointer $data --> int32) is native(LIB) {*};
    method xmlXPathCastNodeToNumber( --> num64) is native(LIB) {*};
    method xmlXPathCastNodeToString( --> xmlCharP) is native(LIB) {*};
    method xmlXPathCmpNodes(xmlNode $node2 --> int32) is native(LIB) {*};
    method xmlXPathNewNodeSet( --> xmlXPathObject) is native(LIB) {*};
    method xmlXPathNewValueTree( --> xmlXPathObject) is native(LIB) {*};
    method xmlXPathNodeEval(xmlCharP $str, xmlXPathContext $ctx --> xmlXPathObject) is native(LIB) {*};
    method xmlXPathNodeSetCreate( --> xmlNodeSet) is native(LIB) {*};
    method xmlXPathSetContextNode(xmlXPathContext $ctx --> int32) is native(LIB) {*};
    method xmlXPtrNewCollapsedRange( --> xmlXPathObject) is native(LIB) {*};
    method xmlXPtrNewLocationSetNodes(xmlNode $end --> xmlXPathObject) is native(LIB) {*};
    method xmlXPtrNewRange(int32 $startindex, xmlNode $end, int32 $endindex --> xmlXPathObject) is native(LIB) {*};
    method xmlXPtrNewRangeNodeObject(xmlXPathObject $end --> xmlXPathObject) is native(LIB) {*};
    method xmlXPtrNewRangeNodePoint(xmlXPathObject $end --> xmlXPathObject) is native(LIB) {*};
    method xmlXPtrNewRangeNodes(xmlNode $end --> xmlXPathObject) is native(LIB) {*};
}

struct xmlNotation is repr('CStruct') {
    has xmlCharP $.name; # Notation name
    has xmlCharP $.PublicID; # Public identifier, if any
    has xmlCharP $.SystemID; # System identifier, if any
}

struct xmlNs is repr('CStruct') {
    has struct _xmlNs * $.next; # next Ns link for this node
    has xmlNsType $.type; # global or local
    has xmlCharP $.href; # URL for the namespace
    has xmlCharP $.prefix; # prefix for the namespace
    has Pointer $._private; # application data
    has struct _xmlDoc * $.context; # normally an xmlDoc
    sub getNamespace(Pointer $ctx --> xmlNs) is native(LIB) {*};
    method xmlCopyNamespace( --> xmlNs) is native(LIB) {*};
    method xmlCopyNamespaceList( --> xmlNs) is native(LIB) {*};
    method xmlFreeNs( --> void) is native(LIB) {*};
    method xmlFreeNsList( --> void) is native(LIB) {*};
    method xmlNewNode(xmlCharP $name --> xmlNode) is native(LIB) {*};
    method xmlNewNodeEatName(xmlCharP $name --> xmlNode) is native(LIB) {*};
    method xmlXPathNodeSetFreeNs( --> void) is native(LIB) {*};
}

struct xmlOutputBuffer is repr('CStruct') {
    has Pointer $.context;
    has xmlOutputWriteCallback $.writecallback;
    has xmlOutputCloseCallback $.closecallback;
    has xmlCharEncodingHandler $.encoder; # I18N conversions to UTF-8
    has xmlBuf $.buffer; # Local buffer encoded in UTF-8 or ISOLatin
    has xmlBuf $.conv; # if encoder != NULL buffer for output
    has int32 $.written; # total number of byte written
    has int32 $.error;
    sub xmlOutputBufferCreateFd(int32 $fd, xmlCharEncodingHandler $encoder --> xmlOutputBuffer) is native(LIB) {*};
    sub xmlOutputBufferCreateFile(FILE * $file, xmlCharEncodingHandler $encoder --> xmlOutputBuffer) is native(LIB) {*};
    sub xmlOutputBufferCreateFilename(Str $URI, xmlCharEncodingHandler $encoder, int32 $compression --> xmlOutputBuffer) is native(LIB) {*};
    sub xmlOutputBufferCreateIO(xmlOutputWriteCallback $iowrite, xmlOutputCloseCallback $ioclose, Pointer $ioctx, xmlCharEncodingHandler $encoder --> xmlOutputBuffer) is native(LIB) {*};
    method htmlDocContentDumpFormatOutput(xmlDoc $cur, Str $encoding, int32 $format --> void) is native(LIB) {*};
    method htmlDocContentDumpOutput(xmlDoc $cur, Str $encoding --> void) is native(LIB) {*};
    method htmlNodeDumpFormatOutput(xmlDoc $doc, xmlNode $cur, Str $encoding, int32 $format --> void) is native(LIB) {*};
    method htmlNodeDumpOutput(xmlDoc $doc, xmlNode $cur, Str $encoding --> void) is native(LIB) {*};
    method xmlNewTextWriter( --> xmlTextWriter) is native(LIB) {*};
    method xmlNodeDumpOutput(xmlDoc $doc, xmlNode $cur, int32 $level, int32 $format, Str $encoding --> void) is native(LIB) {*};
    method xmlOutputBufferClose( --> int32) is native(LIB) {*};
    method xmlOutputBufferFlush( --> int32) is native(LIB) {*};
    method xmlOutputBufferGetContent( --> xmlCharP) is native(LIB) {*};
    method xmlOutputBufferGetSize( --> size_t) is native(LIB) {*};
    method xmlOutputBufferWrite(int32 $len, Str $buf --> int32) is native(LIB) {*};
    method xmlOutputBufferWriteEscape(xmlCharP $str, xmlCharEncodingOutputFunc $escaping --> int32) is native(LIB) {*};
    method xmlOutputBufferWriteString(Str $str --> int32) is native(LIB) {*};
    method xmlSaveFileTo(xmlDoc $cur, Str $encoding --> int32) is native(LIB) {*};
    method xmlSaveFormatFileTo(xmlDoc $cur, Str $encoding, int32 $format --> int32) is native(LIB) {*};
}

struct xmlParserCtxt is repr('CStruct') {
    has struct _xmlSAXHandler * $.sax; # The SAX handler
    has Pointer $.userData; # For SAX interface only, used by DOM build
    has xmlDoc $.myDoc; # the document being built
    has int32 $.wellFormed; # is the document well formed
    has int32 $.replaceEntities; # shall we replace entities ?
    has xmlCharP $.version; # the XML version string
    has xmlCharP $.encoding; # the declared encoding, if any
    has int32 $.standalone; # standalone document
    has int32 $.html; # an HTML(1)/Docbook(2) document * 3 is HTML after <head> * 10 is HTML after <body> * Input stream stack
    has xmlParserInput $.input; # Current input stream
    has int32 $.inputNr; # Number of current input streams
    has int32 $.inputMax; # Max number of input streams
    has xmlParserInputPtr * $.inputTab; # stack of inputs Node analysis stack only used for DOM building
    has xmlNode $.node; # Current parsed Node
    has int32 $.nodeNr; # Depth of the parsing stack
    has int32 $.nodeMax; # Max depth of the parsing stack
    has xmlNodePtr * $.nodeTab; # array of nodes
    has int32 $.record_info; # Whether node info should be kept
    has xmlParserNodeInfoSeq $.node_seq; # info about each node parsed
    has int32 $.errNo; # error code
    has int32 $.hasExternalSubset; # reference and external subset
    has int32 $.hasPErefs; # the internal subset has PE refs
    has int32 $.external; # are we parsing an external entity
    has int32 $.valid; # is the document valid
    has int32 $.validate; # shall we try to validate ?
    has xmlValidCtxt $.vctxt; # The validity context
    has xmlParserInputState $.instate; # current type of input
    has int32 $.token; # next char look-ahead
    has Str $.directory; # the data directory Node name stack
    has xmlCharP $.name; # Current parsed Node
    has int32 $.nameNr; # Depth of the parsing stack
    has int32 $.nameMax; # Max depth of the parsing stack
    has const xmlChar * * $.nameTab; # array of nodes
    has long $.nbChars; # number of xmlChar processed
    has long $.checkIndex; # used by progressive parsing lookup
    has int32 $.keepBlanks; # ugly but ...
    has int32 $.disableSAX; # SAX callbacks are disabled
    has int32 $.inSubset; # Parsing is in int 1/ext 2 subset
    has xmlCharP $.intSubName; # name of subset
    has xmlCharP $.extSubURI; # URI of external subset
    has xmlCharP $.extSubSystem; # SYSTEM ID of external subset xml:space values
    has int * $.space; # Should the parser preserve spaces
    has int32 $.spaceNr; # Depth of the parsing stack
    has int32 $.spaceMax; # Max depth of the parsing stack
    has int * $.spaceTab; # array of space infos
    has int32 $.depth; # to prevent entity substitution loops
    has xmlParserInput $.entity; # used to check entities boundaries
    has int32 $.charset; # encoding of the in-memory content actually an xmlCharEncoding
    has int32 $.nodelen; # Those two fields are there to
    has int32 $.nodemem; # Speed up large node parsing
    has int32 $.pedantic; # signal pedantic warnings
    has Pointer $._private; # For user data, libxml won't touch it
    has int32 $.loadsubset; # should the external subset be loaded
    has int32 $.linenumbers; # set line number in element content
    has Pointer $.catalogs; # document's own catalog
    has int32 $.recovery; # run in recovery mode
    has int32 $.progressive; # is this a progressive parsing
    has xmlDict $.dict; # dictionary for the parser
    has const xmlChar * * $.atts; # array for the attributes callbacks
    has int32 $.maxatts; # the size of the array
    has int32 $.docdict; # * pre-interned strings *
    has xmlCharP $.str_xml;
    has xmlCharP $.str_xmlns;
    has xmlCharP $.str_xml_ns; # * Everything below is used only by the new SAX mode *
    has int32 $.sax2; # operating in the new SAX mode
    has int32 $.nsNr; # the number of inherited namespaces
    has int32 $.nsMax; # the size of the arrays
    has const xmlChar * * $.nsTab; # the array of prefix/namespace name
    has int * $.attallocs; # which attribute were allocated
    has void * * $.pushTab; # array of data for push
    has xmlHashTable $.attsDefault; # defaulted attributes if any
    has xmlHashTable $.attsSpecial; # non-CDATA attributes if any
    has int32 $.nsWellFormed; # is the document XML Nanespace okay
    has int32 $.options; # * Those fields are needed only for treaming parsing so far *
    has int32 $.dictNames; # Use dictionary names for the tree
    has int32 $.freeElemsNr; # number of freed element nodes
    has xmlNode $.freeElems; # List of freed element nodes
    has int32 $.freeAttrsNr; # number of freed attributes nodes
    has xmlAttr $.freeAttrs; # * the complete error informations for the last error. *
    has xmlError $.lastError;
    has xmlParserMode $.parseMode; # the parser mode
    has unsigned long $.nbentities; # number of entities references
    has unsigned long $.sizeentities; # size of parsed entities for use by HTML non-recursive parser
    has xmlParserNodeInfo * $.nodeInfo; # Current NodeInfo
    has int32 $.nodeInfoNr; # Depth of the parsing stack
    has int32 $.nodeInfoMax; # Max depth of the parsing stack
    has xmlParserNodeInfo * $.nodeInfoTab; # array of nodeInfos
    has int32 $.input_id; # we need to label inputs
    has unsigned long $.sizeentcopy; # volume of entity copy
    sub xmlCreateDocParserCtxt(xmlCharP $cur --> xmlParserCtxt) is native(LIB) {*};
    sub xmlCreateEntityParserCtxt(xmlCharP $URL, xmlCharP $ID, xmlCharP $base --> xmlParserCtxt) is native(LIB) {*};
    sub xmlCreateFileParserCtxt(Str $filename --> xmlParserCtxt) is native(LIB) {*};
    sub xmlCreateMemoryParserCtxt(Str $buffer, int32 $size --> xmlParserCtxt) is native(LIB) {*};
    sub xmlCreateURLParserCtxt(Str $filename, int32 $options --> xmlParserCtxt) is native(LIB) {*};
    sub xmlNewParserCtxt( --> xmlParserCtxt) is native(LIB) {*};
    method inputPop( --> xmlParserInput) is native(LIB) {*};
    method inputPush(xmlParserInput $value --> int32) is native(LIB) {*};
    method namePop( --> xmlCharP) is native(LIB) {*};
    method namePush(xmlCharP $value --> int32) is native(LIB) {*};
    method nodePop( --> xmlNode) is native(LIB) {*};
    method nodePush(xmlNode $value --> int32) is native(LIB) {*};
    method xmlByteConsumed( --> long) is native(LIB) {*};
    method xmlCheckHTTPInput(xmlParserInput $ret --> xmlParserInput) is native(LIB) {*};
    method xmlClearParserCtxt( --> void) is native(LIB) {*};
    method xmlCtxtReadDoc(xmlCharP $cur, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(LIB) {*};
    method xmlCtxtReadFd(int32 $fd, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(LIB) {*};
    method xmlCtxtReadFile(Str $filename, Str $encoding, int32 $options --> xmlDoc) is native(LIB) {*};
    method xmlCtxtReadIO(xmlInputReadCallback $ioread, xmlInputCloseCallback $ioclose, Pointer $ioctx, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(LIB) {*};
    method xmlCtxtReadMemory(Str $buffer, int32 $size, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(LIB) {*};
    method xmlCtxtReset( --> void) is native(LIB) {*};
    method xmlCtxtResetPush(Str $chunk, int32 $size, Str $filename, Str $encoding --> int32) is native(LIB) {*};
    method xmlCtxtUseOptions(int32 $options --> int32) is native(LIB) {*};
    method xmlCurrentChar(int * $len --> int32) is native(LIB) {*};
    method xmlDecodeEntities(int32 $len, int32 $what, xmlChar $end, xmlChar $end2, xmlChar $end3 --> xmlCharP) is native(LIB) {*};
    method xmlErrMemory(Str $extra --> void) is native(LIB) {*};
    method xmlFreeParserCtxt( --> void) is native(LIB) {*};
    method xmlGetFeature(Str $name, Pointer $result --> int32) is native(LIB) {*};
    method xmlHandleEntity(xmlEntity $entity --> void) is native(LIB) {*};
    method xmlInitParserCtxt( --> int32) is native(LIB) {*};
    method xmlNamespaceParseNCName( --> xmlCharP) is native(LIB) {*};
    method xmlNamespaceParseNSDef( --> xmlCharP) is native(LIB) {*};
    method xmlNamespaceParseQName(xmlChar ** $prefix --> xmlCharP) is native(LIB) {*};
    method xmlNewEntityInputStream(xmlEntity $entity --> xmlParserInput) is native(LIB) {*};
    method xmlNewIOInputStream(xmlParserInputBuffer $input, xmlCharEncoding $enc --> xmlParserInput) is native(LIB) {*};
    method xmlNewInputFromFile(Str $filename --> xmlParserInput) is native(LIB) {*};
    method xmlNewInputStream( --> xmlParserInput) is native(LIB) {*};
    method xmlNewStringInputStream(xmlCharP $buffer --> xmlParserInput) is native(LIB) {*};
    method xmlNewTextWriterPushParser(int32 $compression --> xmlTextWriter) is native(LIB) {*};
    method xmlNextChar( --> void) is native(LIB) {*};
    method xmlParseAttValue( --> xmlCharP) is native(LIB) {*};
    method xmlParseAttribute(xmlChar ** $value --> xmlCharP) is native(LIB) {*};
    method xmlParseAttributeListDecl( --> void) is native(LIB) {*};
    method xmlParseAttributeType(xmlEnumerationPtr * $tree --> int32) is native(LIB) {*};
    method xmlParseCDSect( --> void) is native(LIB) {*};
    method xmlParseCharData(int32 $cdata --> void) is native(LIB) {*};
    method xmlParseCharRef( --> int32) is native(LIB) {*};
    method xmlParseChunk(Str $chunk, int32 $size, int32 $terminate --> int32) is native(LIB) {*};
    method xmlParseComment( --> void) is native(LIB) {*};
    method xmlParseContent( --> void) is native(LIB) {*};
    method xmlParseCtxtExternalEntity(xmlCharP $URL, xmlCharP $ID, xmlNodePtr * $lst --> int32) is native(LIB) {*};
    method xmlParseDefaultDecl(xmlChar ** $value --> int32) is native(LIB) {*};
    method xmlParseDocTypeDecl( --> void) is native(LIB) {*};
    method xmlParseDocument( --> int32) is native(LIB) {*};
    method xmlParseElement( --> void) is native(LIB) {*};
    method xmlParseElementChildrenContentDecl(int32 $inputchk --> xmlElementContent) is native(LIB) {*};
    method xmlParseElementContentDecl(xmlCharP $name, xmlElementContentPtr * $result --> int32) is native(LIB) {*};
    method xmlParseElementDecl( --> int32) is native(LIB) {*};
    method xmlParseElementMixedContentDecl(int32 $inputchk --> xmlElementContent) is native(LIB) {*};
    method xmlParseEncName( --> xmlCharP) is native(LIB) {*};
    method xmlParseEncodingDecl( --> xmlCharP) is native(LIB) {*};
    method xmlParseEndTag( --> void) is native(LIB) {*};
    method xmlParseEntityDecl( --> void) is native(LIB) {*};
    method xmlParseEntityRef( --> xmlEntity) is native(LIB) {*};
    method xmlParseEntityValue(xmlChar ** $orig --> xmlCharP) is native(LIB) {*};
    method xmlParseEnumeratedType(xmlEnumerationPtr * $tree --> int32) is native(LIB) {*};
    method xmlParseEnumerationType( --> xmlEnumeration) is native(LIB) {*};
    method xmlParseExtParsedEnt( --> int32) is native(LIB) {*};
    method xmlParseExternalID(xmlChar ** $publicID, int32 $strict --> xmlCharP) is native(LIB) {*};
    method xmlParseExternalSubset(xmlCharP $ExternalID, xmlCharP $SystemID --> void) is native(LIB) {*};
    method xmlParseMarkupDecl( --> void) is native(LIB) {*};
    method xmlParseMisc( --> void) is native(LIB) {*};
    method xmlParseName( --> xmlCharP) is native(LIB) {*};
    method xmlParseNamespace( --> void) is native(LIB) {*};
    method xmlParseNmtoken( --> xmlCharP) is native(LIB) {*};
    method xmlParseNotationDecl( --> void) is native(LIB) {*};
    method xmlParseNotationType( --> xmlEnumeration) is native(LIB) {*};
    method xmlParsePEReference( --> void) is native(LIB) {*};
    method xmlParsePI( --> void) is native(LIB) {*};
    method xmlParsePITarget( --> xmlCharP) is native(LIB) {*};
    method xmlParsePubidLiteral( --> xmlCharP) is native(LIB) {*};
    method xmlParseQuotedString( --> xmlCharP) is native(LIB) {*};
    method xmlParseReference( --> void) is native(LIB) {*};
    method xmlParseSDDecl( --> int32) is native(LIB) {*};
    method xmlParseStartTag( --> xmlCharP) is native(LIB) {*};
    method xmlParseSystemLiteral( --> xmlCharP) is native(LIB) {*};
    method xmlParseTextDecl( --> void) is native(LIB) {*};
    method xmlParseVersionInfo( --> xmlCharP) is native(LIB) {*};
    method xmlParseVersionNum( --> xmlCharP) is native(LIB) {*};
    method xmlParseXMLDecl( --> void) is native(LIB) {*};
    method xmlParserAddNodeInfo(const xmlParserNodeInfo $info --> void) is native(LIB) {*};
    method xmlParserHandlePEReference( --> void) is native(LIB) {*};
    method xmlParserHandleReference( --> void) is native(LIB) {*};
    method xmlPopInput( --> xmlChar) is native(LIB) {*};
    method xmlPushInput(xmlParserInput $input --> int32) is native(LIB) {*};
    method xmlScanName( --> xmlCharP) is native(LIB) {*};
    method xmlSetFeature(Str $name, Pointer $value --> int32) is native(LIB) {*};
    method xmlSetupParserForBuffer(xmlCharP $buffer, Str $filename --> void) is native(LIB) {*};
    method xmlSkipBlankChars( --> int32) is native(LIB) {*};
    method xmlSplitQName(xmlCharP $name, xmlChar ** $prefix --> xmlCharP) is native(LIB) {*};
    method xmlStopParser( --> void) is native(LIB) {*};
    method xmlStringCurrentChar(xmlCharP $cur, int * $len --> int32) is native(LIB) {*};
    method xmlStringDecodeEntities(xmlCharP $str, int32 $what, xmlChar $end, xmlChar $end2, xmlChar $end3 --> xmlCharP) is native(LIB) {*};
    method xmlStringLenDecodeEntities(xmlCharP $str, int32 $len, int32 $what, xmlChar $end, xmlChar $end2, xmlChar $end3 --> xmlCharP) is native(LIB) {*};
    method xmlSwitchEncoding(xmlCharEncoding $enc --> int32) is native(LIB) {*};
    method xmlSwitchInputEncoding(xmlParserInput $input, xmlCharEncodingHandler $handler --> int32) is native(LIB) {*};
    method xmlSwitchToEncoding(xmlCharEncodingHandler $handler --> int32) is native(LIB) {*};
}

struct xmlParserInput is repr('CStruct') {
    has xmlParserInputBuffer $.buf; # UTF-8 encoded buffer
    has Str $.filename; # The file analyzed, if any
    has Str $.directory; # the directory/base of the file
    has xmlCharP $.base; # Base of the array to parse
    has xmlCharP $.cur; # Current char being parsed
    has xmlCharP $.end; # end of the array to parse
    has int32 $.length; # length if known
    has int32 $.line; # Current line
    has int32 $.col; # * NOTE: consumed is only tested for equality in the parser code, *       so even if there is an overflow this should not give troubles *       for parsing very large instances. *
    has unsigned long $.consumed; # How many xmlChars already consumed
    has xmlParserInputDeallocate $.free; # function to deallocate the base
    has xmlCharP $.encoding; # the encoding string for entity
    has xmlCharP $.version; # the version string for entity
    has int32 $.standalone; # Was that entity marked standalone
    has int32 $.id; # an unique identifier for the entity
    sub resolveEntity(Pointer $ctx, xmlCharP $publicId, xmlCharP $systemId --> xmlParserInput) is native(LIB) {*};
    sub xmlLoadExternalEntity(Str $URL, Str $ID, xmlParserCtxt $ctxt --> xmlParserInput) is native(LIB) {*};
    sub xmlNoNetExternalEntityLoader(Str $URL, Str $ID, xmlParserCtxt $ctxt --> xmlParserInput) is native(LIB) {*};
    sub xmlSAX2ResolveEntity(Pointer $ctx, xmlCharP $publicId, xmlCharP $systemId --> xmlParserInput) is native(LIB) {*};
    method xmlFreeInputStream( --> void) is native(LIB) {*};
    method xmlParserInputGrow(int32 $len --> int32) is native(LIB) {*};
    method xmlParserInputRead(int32 $len --> int32) is native(LIB) {*};
    method xmlParserInputShrink( --> void) is native(LIB) {*};
    method xmlParserPrintFileContext( --> void) is native(LIB) {*};
    method xmlParserPrintFileInfo( --> void) is native(LIB) {*};
}

struct xmlParserInputBuffer is repr('CStruct') {
    has Pointer $.context;
    has xmlInputReadCallback $.readcallback;
    has xmlInputCloseCallback $.closecallback;
    has xmlCharEncodingHandler $.encoder; # I18N conversions to UTF-8
    has xmlBuf $.buffer; # Local buffer encoded in UTF-8
    has xmlBuf $.raw; # if encoder != NULL buffer for raw input
    has int32 $.compressed; # -1=unknown, 0=not compressed, 1=compressed
    has int32 $.error;
    has unsigned long $.rawconsumed; # amount consumed from raw
    sub xmlAllocParserInputBuffer(xmlCharEncoding $enc --> xmlParserInputBuffer) is native(LIB) {*};
    sub xmlParserInputBufferCreateFd(int32 $fd, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(LIB) {*};
    sub xmlParserInputBufferCreateFile(FILE * $file, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(LIB) {*};
    sub xmlParserInputBufferCreateFilename(Str $URI, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(LIB) {*};
    sub xmlParserInputBufferCreateIO(xmlInputReadCallback $ioread, xmlInputCloseCallback $ioclose, Pointer $ioctx, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(LIB) {*};
    sub xmlParserInputBufferCreateMem(Str $mem, int32 $size, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(LIB) {*};
    sub xmlParserInputBufferCreateStatic(Str $mem, int32 $size, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(LIB) {*};
    method xmlFreeParserInputBuffer( --> void) is native(LIB) {*};
    method xmlNewTextReader(Str $URI --> xmlTextReader) is native(LIB) {*};
    method xmlParserInputBufferGrow(int32 $len --> int32) is native(LIB) {*};
    method xmlParserInputBufferPush(int32 $len, Str $buf --> int32) is native(LIB) {*};
    method xmlParserInputBufferRead(int32 $len --> int32) is native(LIB) {*};
}

struct xmlRef is repr('CStruct') {
    has struct _xmlRef * $.next; # next Ref
    has xmlCharP $.value; # The Ref name
    has xmlAttr $.attr; # The attribute holding it
    has xmlCharP $.name; # The attribute if attr is not available
    has int32 $.lineno; # The line number if attr is not available
}

struct xmlSAXHandler is repr('CStruct') {
    has internalSubsetSAXFunc $.internalSubset;
    has isStandaloneSAXFunc $.isStandalone;
    has hasInternalSubsetSAXFunc $.hasInternalSubset;
    has hasExternalSubsetSAXFunc $.hasExternalSubset;
    has resolveEntitySAXFunc $.resolveEntity;
    has getEntitySAXFunc $.getEntity;
    has entityDeclSAXFunc $.entityDecl;
    has notationDeclSAXFunc $.notationDecl;
    has attributeDeclSAXFunc $.attributeDecl;
    has elementDeclSAXFunc $.elementDecl;
    has unparsedEntityDeclSAXFunc $.unparsedEntityDecl;
    has setDocumentLocatorSAXFunc $.setDocumentLocator;
    has startDocumentSAXFunc $.startDocument;
    has endDocumentSAXFunc $.endDocument;
    has startElementSAXFunc $.startElement;
    has endElementSAXFunc $.endElement;
    has referenceSAXFunc $.reference;
    has charactersSAXFunc $.characters;
    has ignorableWhitespaceSAXFunc $.ignorableWhitespace;
    has processingInstructionSAXFunc $.processingInstruction;
    has commentSAXFunc $.comment;
    has warningSAXFunc $.warning;
    has errorSAXFunc $.error;
    has fatalErrorSAXFunc $.fatalError; # unused error() get all the errors
    has getParameterEntitySAXFunc $.getParameterEntity;
    has cdataBlockSAXFunc $.cdataBlock;
    has externalSubsetSAXFunc $.externalSubset;
    has unsigned int $.initialized; # The following fields are extensions available only on version 2
    has Pointer $._private;
    has startElementNsSAX2Func $.startElementNs;
    has endElementNsSAX2Func $.endElementNs;
    has xmlStructuredErrorFunc $.serror;
    method xmlCreateIOParserCtxt(Pointer $user_data, xmlInputReadCallback $ioread, xmlInputCloseCallback $ioclose, Pointer $ioctx, xmlCharEncoding $enc --> xmlParserCtxt) is native(LIB) {*};
    method xmlCreatePushParserCtxt(Pointer $user_data, Str $chunk, int32 $size, Str $filename --> xmlParserCtxt) is native(LIB) {*};
    method xmlIOParseDTD(xmlParserInputBuffer $input, xmlCharEncoding $enc --> xmlDtd) is native(LIB) {*};
    method xmlSAXParseDTD(xmlCharP $ExternalID, xmlCharP $SystemID --> xmlDtd) is native(LIB) {*};
    method xmlSAXParseDoc(xmlCharP $cur, int32 $recovery --> xmlDoc) is native(LIB) {*};
    method xmlSAXParseEntity(Str $filename --> xmlDoc) is native(LIB) {*};
    method xmlSAXParseFile(Str $filename, int32 $recovery --> xmlDoc) is native(LIB) {*};
    method xmlSAXParseFileWithData(Str $filename, int32 $recovery, Pointer $data --> xmlDoc) is native(LIB) {*};
    method xmlSAXParseMemory(Str $buffer, int32 $size, int32 $recovery --> xmlDoc) is native(LIB) {*};
    method xmlSAXParseMemoryWithData(Str $buffer, int32 $size, int32 $recovery, Pointer $data --> xmlDoc) is native(LIB) {*};
    method xmlSAXUserParseFile(Pointer $user_data, Str $filename --> int32) is native(LIB) {*};
    method xmlSAXUserParseMemory(Pointer $user_data, Str $buffer, int32 $size --> int32) is native(LIB) {*};
}

struct xmlSAXLocator is repr('CStruct') {
    has const xmlChar *(*getPublicId) $.getPublicId;
    has const xmlChar *(*getSystemId) $.getSystemId;
    has int(*getLineNumber) $.getLineNumber;
    has int(*getColumnNumber) $.getColumnNumber;
}
    sub xmlBufContent(const xmlBuf * $buf --> xmlCharP) is native(LIB) {*};
    sub xmlBufUse(const xmlBuf $buf --> size_t) is native(LIB) {*};
    sub xmlBufferContent(const xmlBuffer * $buf --> xmlCharP) is native(LIB) {*};
    sub xmlBufferDump(FILE * $file, xmlBuffer $buf --> int32) is native(LIB) {*};
    sub xmlBufferLength(const xmlBuffer * $buf --> int32) is native(LIB) {*};
    sub xmlBuildQName(xmlCharP $ncname, xmlCharP $prefix, xmlCharP $memory, int32 $len --> xmlCharP) is native(LIB) {*};
    sub xmlDocDump(FILE * $f, xmlDoc $cur --> int32) is native(LIB) {*};
    sub xmlDocFormatDump(FILE * $f, xmlDoc $cur, int32 $format --> int32) is native(LIB) {*};
    sub xmlElemDump(FILE * $f, xmlDoc $doc, xmlNode $cur --> void) is native(LIB) {*};
    sub xmlGetBufferAllocationScheme( --> xmlBufferAllocationScheme) is native(LIB) {*};
    sub xmlGetCompressMode( --> int32) is native(LIB) {*};
    sub xmlGetDocCompressMode(const xmlDoc * $doc --> int32) is native(LIB) {*};
    sub xmlGetLineNo(const xmlNode * $node --> long) is native(LIB) {*};
    sub xmlGetNoNsProp(const xmlNode * $node, xmlCharP $name --> xmlCharP) is native(LIB) {*};
    sub xmlGetNodePath(const xmlNode * $node --> xmlCharP) is native(LIB) {*};
    sub xmlGetNsList(const xmlDoc * $doc, const xmlNode * $node --> xmlNsPtr *) is native(LIB) {*};
    sub xmlGetNsProp(const xmlNode * $node, xmlCharP $name, xmlCharP $nameSpace --> xmlCharP) is native(LIB) {*};
    sub xmlGetProp(const xmlNode * $node, xmlCharP $name --> xmlCharP) is native(LIB) {*};
    sub xmlIsBlankNode(const xmlNode * $node --> int32) is native(LIB) {*};
    sub xmlIsXHTML(xmlCharP $systemID, xmlCharP $publicID --> int32) is native(LIB) {*};
    sub xmlNodeGetBase(const xmlDoc * $doc, const xmlNode * $cur --> xmlCharP) is native(LIB) {*};
    sub xmlNodeGetContent(const xmlNode * $cur --> xmlCharP) is native(LIB) {*};
    sub xmlNodeGetLang(const xmlNode * $cur --> xmlCharP) is native(LIB) {*};
    sub xmlNodeGetSpacePreserve(const xmlNode * $cur --> int32) is native(LIB) {*};
    sub xmlNodeIsText(const xmlNode * $node --> int32) is native(LIB) {*};
    sub xmlNodeListGetRawString(const xmlDoc * $doc, const xmlNode * $list, int32 $inLine --> xmlCharP) is native(LIB) {*};
    sub xmlSaveFile(Str $filename, xmlDoc $cur --> int32) is native(LIB) {*};
    sub xmlSaveFileEnc(Str $filename, xmlDoc $cur, Str $encoding --> int32) is native(LIB) {*};
    sub xmlSaveFormatFile(Str $filename, xmlDoc $cur, int32 $format --> int32) is native(LIB) {*};
    sub xmlSaveFormatFileEnc(Str $filename, xmlDoc $cur, Str $encoding, int32 $format --> int32) is native(LIB) {*};
    sub xmlSetBufferAllocationScheme(xmlBufferAllocationScheme $scheme --> void) is native(LIB) {*};
    sub xmlSetCompressMode(int32 $mode --> void) is native(LIB) {*};
    sub xmlSplitQName2(xmlCharP $name, xmlChar ** $prefix --> xmlCharP) is native(LIB) {*};
    sub xmlSplitQName3(xmlCharP $name, int * $len --> xmlCharP) is native(LIB) {*};
    sub xmlValidateNCName(xmlCharP $value, int32 $space --> int32) is native(LIB) {*};
    sub xmlValidateNMToken(xmlCharP $value, int32 $space --> int32) is native(LIB) {*};
    sub xmlValidateName(xmlCharP $value, int32 $space --> int32) is native(LIB) {*};
    sub xmlValidateQName(xmlCharP $value, int32 $space --> int32) is native(LIB) {*};
