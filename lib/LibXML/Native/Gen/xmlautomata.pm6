use v6;
#  -- DO NOT EDIT --
# generated by: etc/generator.p6 

unit module LibXML::Native::Gen::xmlautomata;
# API to build regexp automata:
#    the API to build regexp automata 
use LibXML::Native::Defs :LIB, :XmlCharP;

struct xmlAutomata is repr('CPointer') {
    sub xmlNewAutomata( --> xmlAutomata) is native(LIB) {*};
    method xmlAutomataCompile( --> xmlRegexp) is native(LIB) {*};
    method xmlAutomataGetInitState( --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataIsDeterminist( --> int32) is native(LIB) {*};
    method xmlAutomataNewAllTrans(xmlAutomataState $from, xmlAutomataState $to, int32 $lax --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewCountTrans(xmlAutomataState $from, xmlAutomataState $to, xmlCharP $token, int32 $min, int32 $max, Pointer $data --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewCountTrans2(xmlAutomataState $from, xmlAutomataState $to, xmlCharP $token, xmlCharP $token2, int32 $min, int32 $max, Pointer $data --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewCountedTrans(xmlAutomataState $from, xmlAutomataState $to, int32 $counter --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewCounter(int32 $min, int32 $max --> int32) is native(LIB) {*};
    method xmlAutomataNewCounterTrans(xmlAutomataState $from, xmlAutomataState $to, int32 $counter --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewEpsilon(xmlAutomataState $from, xmlAutomataState $to --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewNegTrans(xmlAutomataState $from, xmlAutomataState $to, xmlCharP $token, xmlCharP $token2, Pointer $data --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewOnceTrans(xmlAutomataState $from, xmlAutomataState $to, xmlCharP $token, int32 $min, int32 $max, Pointer $data --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewOnceTrans2(xmlAutomataState $from, xmlAutomataState $to, xmlCharP $token, xmlCharP $token2, int32 $min, int32 $max, Pointer $data --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewState( --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewTransition(xmlAutomataState $from, xmlAutomataState $to, xmlCharP $token, Pointer $data --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataNewTransition2(xmlAutomataState $from, xmlAutomataState $to, xmlCharP $token, xmlCharP $token2, Pointer $data --> xmlAutomataState) is native(LIB) {*};
    method xmlAutomataSetFinalState(xmlAutomataState $state --> int32) is native(LIB) {*};
    method xmlFreeAutomata( --> void) is native(LIB) {*};
}

struct xmlAutomataState is repr('CPointer') {
}
